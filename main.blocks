<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="|(@TvSGLneJBoT_lUyi;">strip</variable><variable id="ZAy)+4V%P,sy~lEMz.R6">strip2</variable></variables><block type="variables_set" id="E?4EA0DU`6l61X:TF5is" disabled="true" x="-271" y="-236"><field name="VAR" id="|(@TvSGLneJBoT_lUyi;">strip</field><value name="VALUE"><shadow xmlns="http://www.w3.org/1999/xhtml" type="math_number"><field name="NUM">0</field></shadow><block type="neopixel_create" id="?:ApRuWEo;fE6@Vnf{O4" disabled="true"><field name="pin">DigitalPin.P0</field><value name="numleds"><shadow type="math_number" id="cJ|KXeQqxo-I8Vq)bS`2" disabled="true"><field name="NUM">24</field></shadow></value></block></value></block><block type="variables_set" id=".nYl1xn91nqu_~SqtLjL" disabled="true" x="-55" y="-89"><field name="VAR" id="ZAy)+4V%P,sy~lEMz.R6">strip2</field><value name="VALUE"><shadow xmlns="http://www.w3.org/1999/xhtml" type="math_number"><field name="NUM">0</field></shadow><block type="neopixel_create" id="|zV2Yq0sC|0i/$:}8#o-" disabled="true"><field name="pin">DigitalPin.P0</field><value name="numleds"><shadow type="math_number" id="7S#N!.V)#:niDHW84XwE" disabled="true"><field name="NUM">24</field></shadow></value></block></value></block><block type="pxt-on-start" id="6UbS(*~A(rZH6c3(qPEF" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="8%j/!yF`d75b?5%}5E8v" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum PingUnit {" line1="    //% block=&quot;微秒&quot;" line2="    MicroSeconds," line3="    //% block=&quot;厘米&quot;" line4="    Centimeters," line5="    //% block=&quot;英寸&quot;" line6="    Inches" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="((0F,/n%,+/H`ry${^5v" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum PINs {" line1="    P0," line2="    P1," line3="    P2," line4="    P3," line5="    P4," line6="    P5," line7="    P6," line8="    P7," line9="    P8," line10="    P9," line11="    P10," line12="    P11," line13="    P12," line14="    P13," line15="    P14," line16="    P15," line17="    P16," line18="    P19," line19="    P20" line20="}" numlines="21"></mutation><next><block type="typescript_statement" id="J~^{f:?wRPS%bK6lSiFT" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum TMP36Type {" line1="    //% block=&quot;(℃)&quot; enumval=0" line2="    TMP36_temperature_C," line3="" line4="    //% block=&quot;(℉)&quot; enumval=1" line5="    TMP36_temperature_F," line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="Az5d`})#3{[yTK@aHr{9" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum RGB {" line1="    //% block=&quot;红&quot;" line2="    RED," line3="    //% block=&quot;绿&quot;" line4="    GREEN," line5="    //% block=&quot;蓝&quot;" line6="    BLUE," line7="    //% block=&quot;全部&quot;" line8="    CLEAR" line9="}" numlines="10"></mutation><next><block type="typescript_statement" id="(FJS,r{3vcrZ$;L?^+#|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelColors {" line1="    //% block=红" line2="    Red = 0xFF0000," line3="    //% block=橙" line4="    Orange = 0xFFA500," line5="    //% block=黄" line6="    Yellow = 0xFFFF00," line7="    //% block=绿" line8="    Green = 0x00FF00," line9="    //% block=蓝" line10="    Blue = 0x0000FF," line11="    //% block=靛蓝" line12="    Indigo = 0x4b0082," line13="    //% block=紫罗兰" line14="    Violet = 0x8a2be2," line15="    //% block=紫" line16="    Purple = 0xFF00FF," line17="    //% block=白" line18="    White = 0xFFFFFF," line19="    //% block=黑" line20="    Black = 0x000000" line21="}" numlines="22"></mutation><next><block type="typescript_statement" id="t1|T_5d|{YYNco8v(4-!" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelMode {" line1="    //% block=&quot;RGB (GRB 格式)&quot;" line2="    RGB = 1," line3="    //% block=&quot;RGB+W&quot;" line4="    RGBW = 2," line5="    //% block=&quot;RGB (RGB 格式)&quot;" line6="    RGB_RGB = 3" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="V_*?M+XvW!0MnQ{x@8u~" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Microbit {" line1="" line2="    export enum DHT11_state {" line3="        //% block=&quot;温度(℃)&quot; enumval=0" line4="        DHT11_temperature_C," line5="" line6="        //% block=&quot;湿度(0~100)&quot; enumval=1" line7="        DHT11_humidity," line8="    }" line9="" line10="    export enum Distance_Unit_List {" line11="        //% block=&quot;厘米&quot; " line12="        Distance_Unit_cm," line13="" line14="        //% block=&quot;英寸&quot;" line15="        Distance_Unit_inch," line16="    }" line17="" line18="" line19="" line20="" line21="" line22="" line23="    //% weight=30 " line24="    //% blockId=&quot;gatorParticle_begin&quot; " line25="    //% block=&quot;心率血氧传感器初始化&quot;" line26="    //% group=&quot;心率血氧传感器&quot; subcategory=传感器" line27="    //% shim=gatorParticle::begin" line28="    export function begin() {" line29="        return" line30="    }" line31="" line32="    /**" line33="    * Reads either the Red or Infrared detection channels" line34="    */" line35="    //% weight=29 " line36="    //% blockId=&quot;gatorParticle_color&quot; " line37="    //% block=&quot;获取 %LEDToRead 值&quot;" line38="    //% group=&quot;心率血氧传感器&quot; subcategory=传感器" line39="    //% shim=gatorParticle::color" line40="    export function color(type: LEDToRead): number {" line41="        return 0" line42="    }" line43="" line44="    /**" line45="    * Set which LED's we want the sensor to update and read." line46="    */" line47="    //% weight=28" line48="    //% blockId=&quot;gatorParticle_setReadMode&quot;" line49="    //% block=&quot;设置LED的读取模式 %LEDMode&quot;" line50="    //% group=&quot;心率血氧传感器&quot; subcategory=传感器" line51="    //% shim=gatorParticle::setReadMode" line52="    //% advanced=true" line53="    export function setReadMode(mode: LEDMode) {" line54="        return" line55="    }" line56="" line57="    /**" line58="    * Set the amplitude of either Red or Infrared LED" line59="    */" line60="    //% weight=27" line61="    //% blockId=&quot;gatorParticle_setAmplitude&quot;" line62="    //% block=&quot;将强度从 %LEDToRead | 设置为 %myBrightness&quot;" line63="    //% group=&quot;心率血氧传感器&quot; subcategory=传感器" line64="    //% shim=gatorParticle::setAmplitude" line65="    //% advanced=true" line66="    export function setAmplitude(led: LEDToRead, myBrightness: number) {" line67="        return" line68="    }" line69="" line70="    /**" line71="    * Grab the heartbeat from the sensor in either beats per minute, or an average of the last 4 BPM readings." line72="    */" line73="    //% weight=26" line74="    //% blockId=&quot;gatorParticle_heartbeat&quot;" line75="    //% block=&quot;设置心跳检测方式为%HeartbeatType&quot;" line76="    //% group=&quot;心率血氧传感器&quot; subcategory=传感器" line77="    //% shim=gatorParticle::heartbeat" line78="    export function heartbeat(type: HeartbeatType): number {" line79="        return 0" line80="    }" line81="    declare const enum LEDToRead {" line82="        //% block=&quot;Red&quot; enumval=1" line83="        Red = 1," line84="        //% block=&quot;Infrared&quot; enumval=2" line85="        Infrared = 2," line86="    }" line87="" line88="" line89="    declare const enum HeartbeatType {" line90="        //% block=&quot;BPM&quot; enumval=0" line91="        BPM = 0," line92="        //% block=&quot;AVG&quot; enumval=1" line93="        AVG = 1," line94="    }" line95="" line96="" line97="    declare const enum LEDMode {" line98="        //% block=&quot;Red&quot; enumval=2" line99="        RedLED = 2," line100="        //% block=&quot;Red &amp; Infrared&quot; enumval=3" line101="        RedAndIR = 3," line102="    }" line103="" line104="" line105="" line106="" line107="" line108="" line109="" line110="    //% blockId=&quot;readsoilmoisture&quot; block=&quot;土壤湿度传感器 %soilhumiditypin&quot;" line111="    //% subcategory=传感器" line112="    export function ReadSoilHumidity(soilmoisturepin: AnalogPin): number {" line113="        let voltage = 0;" line114="        let soilmoisture = 0;" line115="        voltage = pins.map(" line116="            pins.analogReadPin(soilmoisturepin)," line117="            0," line118="            1023," line119="            0," line120="            1023" line121="        );" line122="        soilmoisture = voltage;" line123="        return Math.round(soilmoisture);" line124="    }" line125="    //% blockId=&quot;readlightintensity&quot; block=&quot;光敏传感器 %lightintensitypin&quot;" line126="    //% subcategory=传感器" line127="    export function ReadLightIntensity(lightintensitypin: AnalogPin): number {" line128="        let voltage2 = 0;" line129="        let lightintensity = 0;" line130="        voltage2 = pins.map(" line131="            pins.analogReadPin(lightintensitypin)," line132="            0," line133="            1023," line134="            0," line135="            1023" line136="        );" line137="        lightintensity = voltage2;" line138="        return Math.round(1023 - lightintensity);" line139="    }" line140="    /**" line141="    * toggle fans" line142="    */" line143="    //% blockId=fans block=&quot;电机风扇 %pin 切换至 $fanstate || 速度 %speed&quot;" line144="    //% fanstate.shadow=&quot;toggleOnOff&quot;" line145="    //% speed.min=0 speed.max=1023" line146="    //% expandableArgumentMode=&quot;toggle&quot;" line147="    //% subcategory=执行器" line148="    export function motorFan(pin: AnalogPin, fanstate: boolean, speed: number = 1023): void {" line149="        if (fanstate) {" line150="            pins.analogSetPeriod(pin, 1023)" line151="            pins.analogWritePin(pin, Math.map(speed, 0, 1023, 0, 1023))" line152="        }" line153="        else {" line154="            pins.analogWritePin(pin, 0)" line155="            speed = 0" line156="        }" line157="    }" line158="" line159="    /**" line160="    * get Ultrasonic distance" line161="    */" line162="    //% blockId=sonarbit" line163="    //% distance_unit.fieldEditor=&quot;gridpicker&quot;" line164="    //% distance_unit.fieldOptions.columns=2" line165="    //% subcategory=传感器" line166="    //% blockId=sonar_ping block=&quot;超声波传感器 echo %echo trig %trig 单位 %unit&quot;" line167="    export function ping(trig: DigitalPin, echo: DigitalPin, unit: PingUnit, maxCmDistance = 500): number {" line168="        // send pulse" line169="        pins.setPull(trig, PinPullMode.PullNone);" line170="        pins.digitalWritePin(trig, 0);" line171="        control.waitMicros(2);" line172="        pins.digitalWritePin(trig, 1);" line173="        control.waitMicros(10);" line174="        pins.digitalWritePin(trig, 0);" line175="" line176="        // read pulse" line177="        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);" line178="" line179="        switch (unit) {" line180="            case PingUnit.Centimeters: return Math.idiv(d, 58);" line181="            case PingUnit.Inches: return Math.idiv(d, 148);" line182="            default: return d;" line183="        }" line184="    }" line185="" line186="    /**" line187="    * toggle led" line188="    */" line189="    //% blockId=LEDR block=&quot;红色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line190="    //% brightness.min=0 brightness.max=1023" line191="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line192="    //% expandableArgumentMode=&quot;toggle&quot;" line193="    //% subcategory=执行器" line194="    export function ledRBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line195="        if (ledstate) {" line196="            pins.analogSetPeriod(pin, 1023)" line197="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line198="        }" line199="        else {" line200="            pins.analogWritePin(pin, 1023)" line201="            brightness = 1023" line202="        }" line203="    }" line204="" line205="    /**" line206="    * toggle led" line207="    */" line208="    //% blockId=LEDG block=&quot;绿色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line209="    //% brightness.min=0 brightness.max=1023" line210="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line211="    //% expandableArgumentMode=&quot;toggle&quot;" line212="    //% subcategory=执行器" line213="    export function ledGBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line214="        if (ledstate) {" line215="            pins.analogSetPeriod(pin, 1023)" line216="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line217="        }" line218="        else {" line219="            pins.analogWritePin(pin, 1023)" line220="            brightness = 1023" line221="        }" line222="    }" line223="" line224="    /**" line225="    * toggle led" line226="    */" line227="    //% blockId=LEDB block=&quot;蓝色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line228="    //% brightness.min=0 brightness.max=1023" line229="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line230="    //% expandableArgumentMode=&quot;toggle&quot;" line231="    //% subcategory=执行器" line232="    export function ledBBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line233="        if (ledstate) {" line234="            pins.analogSetPeriod(pin, 1023)" line235="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line236="        }" line237="        else {" line238="            pins.analogWritePin(pin, 1023)" line239="            brightness = 1023" line240="        }" line241="    }" line242="" line243="    /**" line244="    * toggle led" line245="    */" line246="    //% blockId=LEDY block=&quot;黄色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line247="    //% brightness.min=0 brightness.max=1023" line248="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line249="    //% expandableArgumentMode=&quot;toggle&quot;" line250="    //% subcategory=执行器" line251="    export function ledYBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line252="        if (ledstate) {" line253="            pins.analogSetPeriod(pin, 1023)" line254="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line255="        }" line256="        else {" line257="            pins.analogWritePin(pin, 1023)" line258="            brightness = 1023" line259="        }" line260="    }" line261="" line262="    const PCA9685_ADD = 0x40" line263="    const MODE1 = 0x00" line264="    const LED0_ON_L = 0x06" line265="    const PRESCALE = 0xFE" line266="" line267="    let initialized = false" line268="" line269="    export enum enPos {" line270="        //% blockId=&quot;forward&quot; block=&quot;前进&quot;" line271="        forward = 1," line272="        //% blockId=&quot;stop&quot; block=&quot;后退&quot;" line273="        stop = 2" line274="    }" line275="" line276="    export enum enServo {" line277="        S1 = 0," line278="        S2," line279="        S3," line280="        S4" line281="    }" line282="" line283="    export enum enMotors {" line284="        M1 = 8," line285="        M2 = 10," line286="        M3 = 12," line287="        M4 = 14" line288="    }" line289="" line290="    function i2cwrite(addr: number, reg: number, value: number) {" line291="        let buf = pins.createBuffer(2)" line292="        buf[0] = reg" line293="        buf[1] = value" line294="        pins.i2cWriteBuffer(addr, buf)" line295="    }" line296="" line297="    function i2cread(addr: number, reg: number) {" line298="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line299="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line300="        return val;" line301="    }" line302="" line303="    function initPCA9685(): void {" line304="        i2cwrite(PCA9685_ADD, MODE1, 0x00)" line305="        setFreq(50);" line306="    }" line307="" line308="    function setFreq(freq: number): void {" line309="        // Constrain the frequency" line310="        let prescaleval = 25000000;" line311="        prescaleval /= 4096;" line312="        prescaleval /= freq;" line313="        prescaleval -= 1;" line314="        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);" line315="        let oldmode = i2cread(PCA9685_ADD, MODE1);" line316="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line317="        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep" line318="        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler" line319="        i2cwrite(PCA9685_ADD, MODE1, oldmode);" line320="        control.waitMicros(5000);" line321="        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);" line322="    }" line323="" line324="    function setPwm(channel: number, on: number, off: number): void {" line325="        if (channel &lt; 0 || channel &gt; 15)" line326="            return;" line327="        if (!initialized) {" line328="            initPCA9685();" line329="        }" line330="        let buf2 = pins.createBuffer(5);" line331="        buf2[0] = LED0_ON_L + 4 * channel;" line332="        buf2[1] = on &amp; 0xff;" line333="        buf2[2] = (on &gt;&gt; 8) &amp; 0xff;" line334="        buf2[3] = off &amp; 0xff;" line335="        buf2[4] = (off &gt;&gt; 8) &amp; 0xff;" line336="        pins.i2cWriteBuffer(PCA9685_ADD, buf2);" line337="    }" line338="" line339="    //% blockId=SuperBit_Servo4 block=&quot;Geek舵机| %num|角度 %value&quot;" line340="    //% num.min=1 num.max=4 value.min=0 value.max=300" line341="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=20" line342="    //% subcategory=执行器" line343="    export function Servo4(num: enServo, value: number): void {" line344="" line345="        // 50hz: 20,000 us" line346="        let us = (value * 1800 * 0.6 / 180 + 600); // 0.6 ~ 2.4" line347="        let pwm = us * 4096 / 20000;" line348="        setPwm(num, 0, pwm);" line349="" line350="    }" line351="" line352="    //% blockId=SuperBit_MotorRun block=&quot;电机|%index|速度(-255~255) %speed&quot;" line353="    //% speed.min=-255 speed.max=255" line354="    //% subcategory=执行器" line355="    export function MotorRun(index: enMotors, speed: number): void {" line356="        if (!initialized) {" line357="            initPCA9685()" line358="        }" line359="        speed = speed * 16; // map 255 to 4096" line360="        if (speed &gt;= 4096) {" line361="            speed = 4095" line362="        }" line363="        if (speed &lt;= -4096) {" line364="            speed = -4095" line365="        }" line366="" line367="        let a = index" line368="        let b = index + 1" line369="" line370="        if (a &gt; 10) {" line371="            if (speed &gt;= 0) {" line372="                setPwm(a, 0, speed)" line373="                setPwm(b, 0, 0)" line374="            } else {" line375="                setPwm(a, 0, 0)" line376="                setPwm(b, 0, -speed)" line377="            }" line378="        }" line379="        else {" line380="            if (speed &gt;= 0) {" line381="                setPwm(b, 0, speed)" line382="                setPwm(a, 0, 0)" line383="            } else {" line384="                setPwm(b, 0, 0)" line385="                setPwm(a, 0, -speed)" line386="            }" line387="        }" line388="    }" line389="" line390="    //% blockId=&quot;elecmagnet&quot; block=&quot;电磁铁 %pin 切换至 %magState || 磁力 %force&quot;" line391="    //% magState.shadow=&quot;toggleOnOff&quot;" line392="    //% force.min=0 force.max=1023" line393="    //% expandableArgumentMode=&quot;toggle&quot;" line394="    //% subcategory=执行器" line395="    export function elecmagnet(pin: AnalogPin, magState: boolean, force: number = 1023): void {" line396="" line397="        if (magState) {" line398="            pins.analogSetPeriod(pin, 1023)" line399="            pins.analogWritePin(pin, Math.map(force, 0, 1023, 0, 1023))" line400="        }" line401="        else {" line402="            pins.analogWritePin(pin, 0)" line403="            force = 0" line404="        }" line405="    }" line406="    //% blockId=&quot;pinpullup&quot; block=&quot;巡线传感器 %pin 引脚为上拉&quot;" line407="    //% subcategory=执行器" line408="    export function pinpullup(pin: PINs): void {" line409="        switch (pin) {" line410="            case PINs.P0: pins.setPull(DigitalPin.P0, PinPullMode.PullUp);" line411="            case PINs.P1: pins.setPull(DigitalPin.P1, PinPullMode.PullUp);" line412="            case PINs.P2: pins.setPull(DigitalPin.P2, PinPullMode.PullUp);" line413="            case PINs.P3: pins.setPull(DigitalPin.P3, PinPullMode.PullUp);" line414="            case PINs.P4: pins.setPull(DigitalPin.P4, PinPullMode.PullUp);" line415="            case PINs.P5: pins.setPull(DigitalPin.P5, PinPullMode.PullUp);" line416="            case PINs.P6: pins.setPull(DigitalPin.P6, PinPullMode.PullUp);" line417="            case PINs.P7: pins.setPull(DigitalPin.P7, PinPullMode.PullUp);" line418="            case PINs.P8: pins.setPull(DigitalPin.P8, PinPullMode.PullUp);" line419="            case PINs.P9: pins.setPull(DigitalPin.P9, PinPullMode.PullUp);" line420="            case PINs.P10: pins.setPull(DigitalPin.P10, PinPullMode.PullUp);" line421="            case PINs.P11: pins.setPull(DigitalPin.P11, PinPullMode.PullUp);" line422="            case PINs.P12: pins.setPull(DigitalPin.P12, PinPullMode.PullUp);" line423="            case PINs.P13: pins.setPull(DigitalPin.P13, PinPullMode.PullUp);" line424="            case PINs.P14: pins.setPull(DigitalPin.P14, PinPullMode.PullUp);" line425="            case PINs.P15: pins.setPull(DigitalPin.P15, PinPullMode.PullUp);" line426="            case PINs.P16: pins.setPull(DigitalPin.P16, PinPullMode.PullUp);" line427="            case PINs.P19: pins.setPull(DigitalPin.P19, PinPullMode.PullUp);" line428="            case PINs.P20: pins.setPull(DigitalPin.P20, PinPullMode.PullUp);" line429="        }" line430="" line431="" line432="    }" line433="" line434="    //% blockId=&quot;laser_controller&quot; block=&quot;激光 %pin 切换至 %laserState || 激光 %intensity&quot;" line435="    //% laserState.shadow=&quot;toggleOnOff&quot;" line436="    //% intensity.min=0 intensity.max=1023" line437="    //% expandableArgumentMode=&quot;toggle&quot;" line438="    //% subcategory=执行器" line439="    export function laserController(pin: AnalogPin, laserState: boolean, intensity: number = 1023): void {" line440="" line441="        if (laserState) {" line442="            pins.analogSetPeriod(pin, 1023)" line443="            pins.analogWritePin(pin, Math.map(intensity, 0, 1023, 0, 1023))" line444="        }" line445="        else {" line446="            pins.analogWritePin(pin, 0)" line447="            intensity = 0" line448="        }" line449="    }" line450="" line451="    //% blockId=&quot;octopus_ReadWaterLevel&quot; block=&quot;水位传感器 %waterlevelpin&quot;" line452="    //% subcategory=传感器" line453="    export function ReadWaterLevel(waterlevelpin: AnalogPin): number {" line454="        let voltage4 = 0;" line455="        let waterLevel = 0;" line456="        voltage4 = pins.map(" line457="            pins.analogReadPin(waterlevelpin)," line458="            0," line459="            1023," line460="            0," line461="            1023" line462="        );" line463="        waterLevel = voltage4;" line464="        return Math.round(waterLevel);" line465="    }" line466="" line467="    //% blockId=&quot;ReadGasConcentration&quot; block=&quot;可燃气体传感器 %gasconcentrationpin&quot;" line468="    //% subcategory=传感器" line469="    export function ReadGasConcentration(gasconcentrationpin: AnalogPin): number {" line470="        let voltage5 = 0;" line471="        let gasConcentration = 0;" line472="        voltage5 = pins.map(" line473="            pins.analogReadPin(gasconcentrationpin)," line474="            0," line475="            1023," line476="            0," line477="            1023" line478="        );" line479="        gasConcentration = voltage5;" line480="        return Math.round(gasConcentration);" line481="    }" line482="" line483="    //% blockId=&quot;Readflame&quot; block=&quot;火焰传感器 %flamepin&quot;" line484="    //% subcategory=传感器" line485="    export function Readflame(flamepin: AnalogPin): number {" line486="        let voltage6 = 0;" line487="        let flame = 0;" line488="        voltage6 = pins.map(" line489="            pins.analogReadPin(flamepin)," line490="            0," line491="            1023," line492="            0," line493="            1023" line494="        );" line495="        flame = voltage6;" line496="        return Math.round(flame);" line497="    }" line498="" line499="    //% blockId=&quot;ReadGrayLevel&quot; block=&quot;灰度传感器 %graylevelpin&quot;" line500="    //% subcategory=传感器" line501="    export function ReadGrayLevel(graylevelpin: AnalogPin): number {" line502="        let voltage7 = 0;" line503="        let grayLevel = 0;" line504="        voltage7 = pins.map(" line505="            pins.analogReadPin(graylevelpin)," line506="            0," line507="            1023," line508="            80," line509="            1023" line510="        );" line511="        grayLevel = voltage7;" line512="        return Math.round(grayLevel);" line513="    }" line514="" line515="    //% blockId=&quot;readWaterTemp&quot; block=&quot;防水温度传感器 %waterproofpin&quot;" line516="    //% subcategory=传感器" line517="    export function readWaterTemp(waterproofpin: AnalogPin): number {" line518="        let voltage22 = 0;" line519="        let waterProofTemp = 0;" line520="        voltage22 = pins.analogReadPin(waterproofpin);//%获得原始值" line521="        if (voltage22 &gt; 1001) { waterProofTemp = 100; }" line522="        else if (voltage22 &gt; 1000) { waterProofTemp = 98; }" line523="        else if (voltage22 &gt; 999) { waterProofTemp = 97; }" line524="        else if (voltage22 &gt; 998) { waterProofTemp = 96; }" line525="        else if (voltage22 &gt; 997) { waterProofTemp = 95; }" line526="        else if (voltage22 &gt; 996) { waterProofTemp = 93; }" line527="        else if (voltage22 &gt; 995) { waterProofTemp = 92; }" line528="        else if (voltage22 &gt; 994) { waterProofTemp = 91; }" line529="        else if (voltage22 &gt; 993) { waterProofTemp = 90; }" line530="        else if (voltage22 &gt; 992) { waterProofTemp = 89; }" line531="        else if (voltage22 &gt; 991) { waterProofTemp = 88; }" line532="        else if (voltage22 &gt; 990) { waterProofTemp = 87; }" line533="        else if (voltage22 &gt; 989) { waterProofTemp = 86; }" line534="        else if (voltage22 &gt; 988) { waterProofTemp = 85; }" line535="        else if (voltage22 &gt; 987) { waterProofTemp = 84; }" line536="        else if (voltage22 &gt; 986) { waterProofTemp = 83; }" line537="        else if (voltage22 &gt; 985) { waterProofTemp = 82; }" line538="        else if (voltage22 &gt; 984) { waterProofTemp = 81; }" line539="        else if (voltage22 &gt; 982) { waterProofTemp = 80; }" line540="        else if (voltage22 &gt; 981) { waterProofTemp = 79; }" line541="        else if (voltage22 &gt; 980) { waterProofTemp = 78; }" line542="        else if (voltage22 &gt; 978) { waterProofTemp = 77; }" line543="        else if (voltage22 &gt; 977) { waterProofTemp = 76; }" line544="        else if (voltage22 &gt; 975) { waterProofTemp = 75; }" line545="        else if (voltage22 &gt; 974) { waterProofTemp = 74; }" line546="        else if (voltage22 &gt; 972) { waterProofTemp = 73; }" line547="        else if (voltage22 &gt; 971) { waterProofTemp = 72; }" line548="        else if (voltage22 &gt; 969) { waterProofTemp = 71; }" line549="        else if (voltage22 &gt; 967) { waterProofTemp = 70; }" line550="        else if (voltage22 &gt; 965) { waterProofTemp = 69; }" line551="        else if (voltage22 &gt; 963) { waterProofTemp = 68; }" line552="        else if (voltage22 &gt; 961) { waterProofTemp = 67; }" line553="        else if (voltage22 &gt; 959) { waterProofTemp = 66; }" line554="        else if (voltage22 &gt; 957) { waterProofTemp = 65; }" line555="        else if (voltage22 &gt; 955) { waterProofTemp = 64; }" line556="        else if (voltage22 &gt; 953) { waterProofTemp = 63; }" line557="        else if (voltage22 &gt; 950) { waterProofTemp = 62; }" line558="        else if (voltage22 &gt; 948) { waterProofTemp = 61; }" line559="        else if (voltage22 &gt; 943) { waterProofTemp = 59; }" line560="        else if (voltage22 &gt; 940) { waterProofTemp = 58; }" line561="        else if (voltage22 &gt; 937) { waterProofTemp = 57; }" line562="        else if (voltage22 &gt; 934) { waterProofTemp = 56; }" line563="        else if (voltage22 &gt; 931) { waterProofTemp = 55; }" line564="        else if (voltage22 &gt; 928) { waterProofTemp = 54; }" line565="        else if (voltage22 &gt; 924) { waterProofTemp = 53; }" line566="        else if (voltage22 &gt; 921) { waterProofTemp = 52; }" line567="        else if (voltage22 &gt; 917) { waterProofTemp = 51; }" line568="        else if (voltage22 &gt; 914) { waterProofTemp = 51; }" line569="        else if (voltage22 &gt; 910) { waterProofTemp = 49; }" line570="        else if (voltage22 &gt; 906) { waterProofTemp = 48; }" line571="        else if (voltage22 &gt; 902) { waterProofTemp = 47; }" line572="        else if (voltage22 &gt; 898) { waterProofTemp = 46; }" line573="        else if (voltage22 &gt; 893) { waterProofTemp = 45; }" line574="        else if (voltage22 &gt; 889) { waterProofTemp = 44; }" line575="        else if (voltage22 &gt; 884) { waterProofTemp = 43; }" line576="        else if (voltage22 &gt; 879) { waterProofTemp = 42; }" line577="        else if (voltage22 &gt; 874) { waterProofTemp = 41; }" line578="        else if (voltage22 &gt; 869) { waterProofTemp = 40; }" line579="        else if (voltage22 &gt; 864) { waterProofTemp = 39; }" line580="        else if (voltage22 &gt; 858) { waterProofTemp = 38; }" line581="        else if (voltage22 &gt; 852) { waterProofTemp = 37; }" line582="        else if (voltage22 &gt; 846) { waterProofTemp = 36; }" line583="        else if (voltage22 &gt; 840) { waterProofTemp = 35; }" line584="        else if (voltage22 &gt; 834) { waterProofTemp = 34; }" line585="        else if (voltage22 &gt; 827) { waterProofTemp = 33; }" line586="        else if (voltage22 &gt; 821) { waterProofTemp = 32; }" line587="        else if (voltage22 &gt; 814) { waterProofTemp = 31; }" line588="        else if (voltage22 &gt; 806) { waterProofTemp = 30; }" line589="        else if (voltage22 &gt; 799) { waterProofTemp = 29; }" line590="        else if (voltage22 &gt; 791) { waterProofTemp = 28; }" line591="        else if (voltage22 &gt; 784) { waterProofTemp = 27; }" line592="        else if (voltage22 &gt; 776) { waterProofTemp = 26; }" line593="        else if (voltage22 &gt; 767) { waterProofTemp = 25; }" line594="        else if (voltage22 &gt; 759) { waterProofTemp = 24; }" line595="        else if (voltage22 &gt; 750) { waterProofTemp = 23; }" line596="        else if (voltage22 &gt; 741) { waterProofTemp = 22; }" line597="        else if (voltage22 &gt; 732) { waterProofTemp = 21; }" line598="        else if (voltage22 &gt; 713) { waterProofTemp = 19; }" line599="        else if (voltage22 &gt; 703) { waterProofTemp = 18; }" line600="        else if (voltage22 &gt; 692) { waterProofTemp = 17; }" line601="        else if (voltage22 &gt; 682) { waterProofTemp = 16; }" line602="        else if (voltage22 &gt; 671) { waterProofTemp = 15; }" line603="        else if (voltage22 &gt; 661) { waterProofTemp = 14; }" line604="        else if (voltage22 &gt; 650) { waterProofTemp = 13; }" line605="        else if (voltage22 &gt; 638) { waterProofTemp = 12; }" line606="        else if (voltage22 &gt; 627) { waterProofTemp = 11; }" line607="        else if (voltage22 &gt; 615) { waterProofTemp = 10; }" line608="        else if (voltage22 &gt; 604) { waterProofTemp = 9; }" line609="        else if (voltage22 &gt; 592) { waterProofTemp = 8; }" line610="        else if (voltage22 &gt; 579) { waterProofTemp = 7; }" line611="        else if (voltage22 &gt; 567) { waterProofTemp = 6; }" line612="        else if (voltage22 &gt; 555) { waterProofTemp = 5; }" line613="        else if (voltage22 &gt; 542) { waterProofTemp = 4; }" line614="        else if (voltage22 &gt; 530) { waterProofTemp = 3; }" line615="        else if (voltage22 &gt; 517) { waterProofTemp = 2; }" line616="        else if (voltage22 &gt; 504) { waterProofTemp = 1; }" line617="        else { waterProofTemp = 0; }" line618="        return waterProofTemp;" line619="    }" line620="" line621="    //% blockId=potentiometerRead" line622="    //% block=&quot;电位器 %pin&quot;" line623="    //% subcategory=传感器" line624="    export function potentiometerRead(pin: AnalogPin): number {" line625="        return pins.analogReadPin(pin);" line626="    }" line627="" line628="    //% blockId=buttonState" line629="    //% block=&quot;按钮传感器 %pin&quot;" line630="    //% subcategory=传感器" line631="    export function buttonState(pin: DigitalPin): number {" line632="" line633="        return pins.digitalReadPin(pin);" line634="    }" line635="    //% blockId=followState" line636="    //% block=&quot;巡线传感器 %pin&quot;" line637="    //% subcategory=传感器" line638="    export function followState(pin: PINs): number {" line639="        switch (pin) {" line640="            case PINs.P0: return pins.digitalReadPin(DigitalPin.P0);" line641="            case PINs.P1: return pins.digitalReadPin(DigitalPin.P1);" line642="            case PINs.P2: return pins.digitalReadPin(DigitalPin.P2);" line643="            case PINs.P3: return pins.digitalReadPin(DigitalPin.P3);" line644="            case PINs.P4: return pins.digitalReadPin(DigitalPin.P4);" line645="            case PINs.P5: return pins.digitalReadPin(DigitalPin.P5);" line646="            case PINs.P6: return pins.digitalReadPin(DigitalPin.P6);" line647="            case PINs.P7: return pins.digitalReadPin(DigitalPin.P7);" line648="            case PINs.P8: return pins.digitalReadPin(DigitalPin.P8);" line649="            case PINs.P9: return pins.digitalReadPin(DigitalPin.P9);" line650="            case PINs.P10: return pins.digitalReadPin(DigitalPin.P10);" line651="            case PINs.P11: return pins.digitalReadPin(DigitalPin.P11);" line652="            case PINs.P12: return pins.digitalReadPin(DigitalPin.P12);" line653="            case PINs.P13: return pins.digitalReadPin(DigitalPin.P13);" line654="            case PINs.P14: return pins.digitalReadPin(DigitalPin.P14);" line655="            case PINs.P15: return pins.digitalReadPin(DigitalPin.P15);" line656="            case PINs.P16: return pins.digitalReadPin(DigitalPin.P16);" line657="            case PINs.P19: return pins.digitalReadPin(DigitalPin.P19);" line658="            case PINs.P20: return pins.digitalReadPin(DigitalPin.P20);" line659="" line660="        }" line661="" line662="    }" line663="" line664="    //% blockId=farState" line665="    //% block=&quot;远距离光电传感器 %pin&quot;" line666="    //% subcategory=传感器" line667="    export function farState(pin: DigitalPin): number {" line668="        return pins.digitalReadPin(pin);" line669="    }" line670="" line671="    //% blockId=hState" line672="    //% block=&quot;霍尔传感器 %pin&quot;" line673="    //% subcategory=传感器" line674="    export function hState(pin: DigitalPin): number {" line675="        return pins.digitalReadPin(pin);" line676="    }" line677="" line678="    enum LCS_Constants {" line679="        // Constants" line680="        ADDRESS = 0x29," line681="        ID = 0x12, // Register should be equal to 0x44 for the TCS34721 or TCS34725, or 0x4D for the TCS34723 or TCS34727." line682="" line683="        COMMAND_BIT = 0x80," line684="" line685="        ENABLE = 0x00," line686="        ENABLE_AIEN = 0x10, // RGBC Interrupt Enable" line687="        ENABLE_WEN = 0x08, // Wait enable - Writing 1 activates the wait timer" line688="        ENABLE_AEN = 0x02, // RGBC Enable - Writing 1 actives the ADC, 0 disables it" line689="        ENABLE_PON = 0x01, // Power on - Writing 1 activates the internal oscillator, 0 disables it" line690="        ATIME = 0x01, // Integration time" line691="        WTIME = 0x03, // Wait time (if ENABLE_WEN is asserted)" line692="        AILTL = 0x04, // Clear channel lower interrupt threshold" line693="        AILTH = 0x05," line694="        AIHTL = 0x06, // Clear channel upper interrupt threshold" line695="        AIHTH = 0x07," line696="        PERS = 0x0C, // Persistence register - basic SW filtering mechanism for interrupts" line697="        PERS_NONE = 0x00, // Every RGBC cycle generates an interrupt" line698="        PERS_1_CYCLE = 0x01, // 1 clean channel value outside threshold range generates an interrupt" line699="        PERS_2_CYCLE = 0x02, // 2 clean channel values outside threshold range generates an interrupt" line700="        PERS_3_CYCLE = 0x03, // 3 clean channel values outside threshold range generates an interrupt" line701="        PERS_5_CYCLE = 0x04, // 5 clean channel values outside threshold range generates an interrupt" line702="        PERS_10_CYCLE = 0x05, // 10 clean channel values outside threshold range generates an interrupt" line703="        PERS_15_CYCLE = 0x06, // 15 clean channel values outside threshold range generates an interrupt" line704="        PERS_20_CYCLE = 0x07, // 20 clean channel values outside threshold range generates an interrupt" line705="        PERS_25_CYCLE = 0x08, // 25 clean channel values outside threshold range generates an interrupt" line706="        PERS_30_CYCLE = 0x09, // 30 clean channel values outside threshold range generates an interrupt" line707="        PERS_35_CYCLE = 0x0A, // 35 clean channel values outside threshold range generates an interrupt" line708="        PERS_40_CYCLE = 0x0B, // 40 clean channel values outside threshold range generates an interrupt" line709="        PERS_45_CYCLE = 0x0C, // 45 clean channel values outside threshold range generates an interrupt" line710="        PERS_50_CYCLE = 0x0D, // 50 clean channel values outside threshold range generates an interrupt" line711="        PERS_55_CYCLE = 0x0E, // 55 clean channel values outside threshold range generates an interrupt" line712="        PERS_60_CYCLE = 0x0F, // 60 clean channel values outside threshold range generates an interrupt" line713="        CONFIG = 0x0D," line714="        CONFIG_WLONG = 0x02, // Choose between short and long (12x) wait times via WTIME" line715="        CONTROL = 0x0F, // Set the gain level for the sensor" line716="        STATUS = 0x13," line717="        STATUS_AINT = 0x10, // RGBC Clean channel interrupt" line718="        STATUS_AVALID = 0x01, // Indicates that the RGBC channels have completed an integration cycle" line719="" line720="        CDATAL = 0x14, // Clear channel data" line721="        CDATAH = 0x15," line722="        RDATAL = 0x16, // Red channel data" line723="        RDATAH = 0x17," line724="        GDATAL = 0x18, // Green channel data" line725="        GDATAH = 0x19," line726="        BDATAL = 0x1A, // Blue channel data" line727="        BDATAH = 0x1B," line728="" line729="        GAIN_1X = 0x00, //  1x gain" line730="        GAIN_4X = 0x01, //  4x gain" line731="        GAIN_16X = 0x02, // 16x gain" line732="        GAIN_60X = 0x03  // 60x gain" line733="    }" line734="" line735="    let LCS_integration_time_val = 0" line736="" line737="    // I2C functions" line738="" line739="    function I2C_WriteReg8(addr: number, reg: number, val: number) {" line740="        let buf3 = pins.createBuffer(2)" line741="        buf3.setNumber(NumberFormat.UInt8BE, 0, reg)" line742="        buf3.setNumber(NumberFormat.UInt8BE, 1, val)" line743="        pins.i2cWriteBuffer(addr, buf3)" line744="    }" line745="" line746="    function I2C_ReadReg8(addr: number, reg: number): number {" line747="        let buf4 = pins.createBuffer(1)" line748="        buf4.setNumber(NumberFormat.UInt8BE, 0, reg)" line749="        pins.i2cWriteBuffer(addr, buf4)" line750="        buf4 = pins.i2cReadBuffer(addr, 1)" line751="        return buf4.getNumber(NumberFormat.UInt8BE, 0);" line752="    }" line753="" line754="    function I2C_ReadReg16(addr: number, reg: number): number {" line755="        let buf5 = pins.createBuffer(1)" line756="        buf5.setNumber(NumberFormat.UInt8BE, 0, reg)" line757="        pins.i2cWriteBuffer(addr, buf5)" line758="        buf5 = pins.i2cReadBuffer(addr, 2)" line759="        // Little endian" line760="        return ((buf5.getNumber(NumberFormat.UInt8BE, 1) &lt;&lt; 8) | buf5.getNumber(NumberFormat.UInt8BE, 0));" line761="    }" line762="    function LCS_get_raw_data(delay: boolean = false): number[] {" line763="        if (delay) {" line764="            // Delay for the integration time to allow reading immediately after the previous read." line765="            basic.pause((256 - LCS_integration_time_val) * 2.4)" line766="        }" line767="" line768="        let div = (256 - LCS_integration_time_val) * 1024" line769="        let rgbc = [0, 0, 0, 0]" line770="        rgbc[0] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.RDATAL)) / div" line771="        rgbc[1] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.GDATAL)) / div" line772="        rgbc[2] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.BDATAL)) / div" line773="        rgbc[3] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.CDATAL)) / div" line774="        if (rgbc[0] &gt; 1) {" line775="            rgbc[0] = 1" line776="        }" line777="        if (rgbc[1] &gt; 1) {" line778="            rgbc[1] = 1" line779="        }" line780="        if (rgbc[2] &gt; 1) {" line781="            rgbc[2] = 1" line782="        }" line783="        if (rgbc[3] &gt; 1) {" line784="            rgbc[3] = 1" line785="        }" line786="        return rgbc" line787="    }" line788="" line789="    let font: number[] = [];" line790="    font[0] = 0x0022d422;" line791="    font[1] = 0x0022d422;" line792="    font[2] = 0x0022d422;" line793="    font[3] = 0x0022d422;" line794="    font[4] = 0x0022d422;" line795="    font[5] = 0x0022d422;" line796="    font[6] = 0x0022d422;" line797="    font[7] = 0x0022d422;" line798="    font[8] = 0x0022d422;" line799="    font[9] = 0x0022d422;" line800="    font[10] = 0x0022d422;" line801="    font[11] = 0x0022d422;" line802="    font[12] = 0x0022d422;" line803="    font[13] = 0x0022d422;" line804="    font[14] = 0x0022d422;" line805="    font[15] = 0x0022d422;" line806="    font[16] = 0x0022d422;" line807="    font[17] = 0x0022d422;" line808="    font[18] = 0x0022d422;" line809="    font[19] = 0x0022d422;" line810="    font[20] = 0x0022d422;" line811="    font[21] = 0x0022d422;" line812="    font[22] = 0x0022d422;" line813="    font[23] = 0x0022d422;" line814="    font[24] = 0x0022d422;" line815="    font[25] = 0x0022d422;" line816="    font[26] = 0x0022d422;" line817="    font[27] = 0x0022d422;" line818="    font[28] = 0x0022d422;" line819="    font[29] = 0x0022d422;" line820="    font[30] = 0x0022d422;" line821="    font[31] = 0x0022d422;" line822="    font[32] = 0x00000000;" line823="    font[33] = 0x000002e0;" line824="    font[34] = 0x00018060;" line825="    font[35] = 0x00afabea;" line826="    font[36] = 0x00aed6ea;" line827="    font[37] = 0x01991133;" line828="    font[38] = 0x010556aa;" line829="    font[39] = 0x00000060;" line830="    font[40] = 0x000045c0;" line831="    font[41] = 0x00003a20;" line832="    font[42] = 0x00051140;" line833="    font[43] = 0x00023880;" line834="    font[44] = 0x00002200;" line835="    font[45] = 0x00021080;" line836="    font[46] = 0x00000100;" line837="    font[47] = 0x00111110;" line838="    font[48] = 0x0007462e;" line839="    font[49] = 0x00087e40;" line840="    font[50] = 0x000956b9;" line841="    font[51] = 0x0005d629;" line842="    font[52] = 0x008fa54c;" line843="    font[53] = 0x009ad6b7;" line844="    font[54] = 0x008ada88;" line845="    font[55] = 0x00119531;" line846="    font[56] = 0x00aad6aa;" line847="    font[57] = 0x0022b6a2;" line848="    font[58] = 0x00000140;" line849="    font[59] = 0x00002a00;" line850="    font[60] = 0x0008a880;" line851="    font[61] = 0x00052940;" line852="    font[62] = 0x00022a20;" line853="    font[63] = 0x0022d422;" line854="    font[64] = 0x00e4d62e;" line855="    font[65] = 0x000f14be;" line856="    font[66] = 0x000556bf;" line857="    font[67] = 0x0008c62e;" line858="    font[68] = 0x0007463f;" line859="    font[69] = 0x0008d6bf;" line860="    font[70] = 0x000094bf;" line861="    font[71] = 0x00cac62e;" line862="    font[72] = 0x000f909f;" line863="    font[73] = 0x000047f1;" line864="    font[74] = 0x0017c629;" line865="    font[75] = 0x0008a89f;" line866="    font[76] = 0x0008421f;" line867="    font[77] = 0x01f1105f;" line868="    font[78] = 0x01f4105f;" line869="    font[79] = 0x0007462e;" line870="    font[80] = 0x000114bf;" line871="    font[81] = 0x000b6526;" line872="    font[82] = 0x010514bf;" line873="    font[83] = 0x0004d6b2;" line874="    font[84] = 0x0010fc21;" line875="    font[85] = 0x0007c20f;" line876="    font[86] = 0x00744107;" line877="    font[87] = 0x01f4111f;" line878="    font[88] = 0x000d909b;" line879="    font[89] = 0x00117041;" line880="    font[90] = 0x0008ceb9;" line881="    font[91] = 0x0008c7e0;" line882="    font[92] = 0x01041041;" line883="    font[93] = 0x000fc620;" line884="    font[94] = 0x00010440;" line885="    font[95] = 0x01084210;" line886="    font[96] = 0x00000820;" line887="    font[97] = 0x010f4a4c;" line888="    font[98] = 0x0004529f;" line889="    font[99] = 0x00094a4c;" line890="    font[100] = 0x000fd288;" line891="    font[101] = 0x000956ae;" line892="    font[102] = 0x000097c4;" line893="    font[103] = 0x0007d6a2;" line894="    font[104] = 0x000c109f;" line895="    font[105] = 0x000003a0;" line896="    font[106] = 0x0006c200;" line897="    font[107] = 0x0008289f;" line898="    font[108] = 0x000841e0;" line899="    font[109] = 0x01e1105e;" line900="    font[110] = 0x000e085e;" line901="    font[111] = 0x00064a4c;" line902="    font[112] = 0x0002295e;" line903="    font[113] = 0x000f2944;" line904="    font[114] = 0x0001085c;" line905="    font[115] = 0x00012a90;" line906="    font[116] = 0x010a51e0;" line907="    font[117] = 0x010f420e;" line908="    font[118] = 0x00644106;" line909="    font[119] = 0x01e8221e;" line910="    font[120] = 0x00093192;" line911="    font[121] = 0x00222292;" line912="    font[122] = 0x00095b52;" line913="    font[123] = 0x0008fc80;" line914="    font[124] = 0x000003e0;" line915="    font[125] = 0x000013f1;" line916="    font[126] = 0x00841080;" line917="    font[127] = 0x0022d422;" line918="" line919="    let _I2CAddr = 0;" line920="    let _screen = pins.createBuffer(1025);" line921="    let _buf2 = pins.createBuffer(2);" line922="    let _buf3 = pins.createBuffer(3);" line923="    let _buf4 = pins.createBuffer(4);" line924="    let _ZOOM = 1;" line925="" line926="    function cmd1(d: number) {" line927="        let n = d % 256;" line928="        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);" line929="    }" line930="" line931="    function cmd2(d1: number, d2: number) {" line932="        _buf3[0] = 0;" line933="        _buf3[1] = d1;" line934="        _buf3[2] = d2;" line935="        pins.i2cWriteBuffer(_I2CAddr, _buf3);" line936="    }" line937="" line938="    function cmd3(d1: number, d2: number, d3: number) {" line939="        _buf4[0] = 0;" line940="        _buf4[1] = d1;" line941="        _buf4[2] = d2;" line942="        _buf4[3] = d3;" line943="        pins.i2cWriteBuffer(_I2CAddr, _buf4);" line944="    }" line945="" line946="    function set_pos(col: number = 0, page: number = 0) {" line947="        cmd1(0xb0 | page) // page number" line948="        let c = col * (_ZOOM + 1)" line949="        cmd1(0x00 | (c % 16)) // lower start column address" line950="        cmd1(0x10 | (c &gt;&gt; 4)) // upper start column address    " line951="    }" line952="" line953="    // clear bit" line954="    function clrbit(d: number, b: number): number {" line955="        if (d &amp; (1 &lt;&lt; b))" line956="            d -= (1 &lt;&lt; b)" line957="        return d" line958="    }" line959="" line960="    /**" line961="     * show text in OLED" line962="     * @param x is X alis, eg: 0" line963="     * @param y is Y alis, eg: 0" line964="     * @param s is the text will be show, eg: 'Hello!'" line965="     */" line966="    //% blockId=&quot;OLED12864_I2C_SHOWSTRING1&quot; block=&quot;显示 文本 在 x %x|y %y|文本 %s&quot;" line967="    //% parts=OLED12864_I2C trackArgs=0" line968="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line969="    //% weight=80 blockGap=10 color=#0855AA" line970="    export function showString(x: number, y: number, s: string, color: number = 1) {" line971="        let col2 = 0" line972="        let q = 0" line973="        let ind2 = 0" line974="        for (let r = 0; r &lt; s.length; r++) {" line975="            q = font[s.charCodeAt(r)]" line976="            for (let k = 0; k &lt; 5; k++) {" line977="                col2 = 0" line978="                for (let l = 0; l &lt; 5; l++) {" line979="                    if (q &amp; (1 &lt;&lt; (5 * k + l)))" line980="                        col2 |= (1 &lt;&lt; (l + 1))" line981="                }" line982="                ind2 = (x + r) * 5 * (_ZOOM + 1) + y * 128 + k * (_ZOOM + 1) + 1" line983="                if (color == 0)" line984="                    col2 = 255 - col2" line985="                _screen[ind2] = col2" line986="                if (_ZOOM)" line987="                    _screen[ind2 + 1] = col2" line988="            }" line989="        }" line990="        set_pos(x * 5, y)" line991="        let ind02 = x * 5 * (_ZOOM + 1) + y * 128" line992="        let buf7 = _screen.slice(ind02, ind2 + 1)" line993="        buf7[0] = 0x40" line994="        pins.i2cWriteBuffer(_I2CAddr, buf7)" line995="    }" line996="" line997="    /**" line998="     * show a number in OLED" line999="     * @param x is X alis, eg: 0" line1000="     * @param y is Y alis, eg: 0" line1001="     * @param num is the number will be show, eg: 12" line1002="     * @param color is number color, eg: 1" line1003="     */" line1004="    //% blockId=&quot;OLED12864_I2C_NUMBER&quot; block=&quot;显示 数字 在 x %x|y %y|数字 %num&quot;" line1005="    //% parts=OLED12864_I2C trackArgs=0" line1006="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line1007="    //% weight=80 blockGap=10 color=#0855AA" line1008="    export function showNumber(x: number, y: number, num: number, color: number = 1) {" line1009="        showString(x, y, num.toString(), color)" line1010="    }" line1011="" line1012="" line1013="    export function draw() {" line1014="        set_pos()" line1015="        pins.i2cWriteBuffer(_I2CAddr, _screen)" line1016="    }" line1017="" line1018="    /**" line1019="     * clear screen" line1020="     */" line1021="    //% blockId=&quot;OLED12864_I2C_CLEAR&quot; block=&quot;清除&quot;" line1022="    //% parts=OLED12864_I2C trackArgs=0" line1023="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line1024="    //% weight=63 blockGap=10 color=#0855AA" line1025="    export function clear() {" line1026="        _screen.fill(0)" line1027="        _screen[0] = 0x40" line1028="        draw()" line1029="    }" line1030="" line1031="    /**" line1032="     * OLED initialize" line1033="     * @param addr is i2c addr, eg: 60" line1034="     */" line1035="    //% blockId=&quot;OLED12864_I2C_init&quot; block=&quot;初始化 OLED 地址为 %addr&quot;" line1036="    //% parts=OLED12864_I2C trackArgs=0" line1037="    //% weight=85 blockGap=10" line1038="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line1039="    //% blockGap=10  color=#0855AA" line1040="    export function init(addr: number) {" line1041="        _I2CAddr = addr;" line1042="        cmd1(0xAE)       // SSD1306_DISPLAYOFF" line1043="        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME" line1044="        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV" line1045="        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX" line1046="        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET" line1047="        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE" line1048="        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP" line1049="        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE" line1050="        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR" line1051="        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR" line1052="        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP" line1053="        cmd1(0xc8)       // SSD1306_COMSCANDEC" line1054="        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS" line1055="        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST" line1056="        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE" line1057="        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT" line1058="        cmd1(0xA6)       // SSD1306_NORMALDISPLAY" line1059="        cmd2(0xD6, 1)    // zoom on" line1060="        cmd1(0xAF)       // SSD1306_DISPLAYON" line1061="        clear()" line1062="        _ZOOM = 1" line1063="    }" line1064="" line1065="    /**" line1066="     * A NeoPixel strip" line1067="     */" line1068="    export class Strip {" line1069="        buf: Buffer;" line1070="        pin: DigitalPin;" line1071="        // TODO: encode as bytes instead of 32bit" line1072="        brightness: number;" line1073="        start: number; // start offset in LED strip" line1074="        _length: number; // number of LEDs" line1075="        _mode: NeoPixelMode;" line1076="        _matrixWidth: number; // number of leds in a matrix - if any" line1077="" line1078="        /**" line1079="         * Shows all LEDs to a given color (range 0-255 for r, g, b)." line1080="         * @param rgb RGB color of the LED" line1081="         */" line1082="        //% blockId=&quot;neopixel_set_strip_color&quot; block=&quot;%strip|显示 颜色 %rgb=neopixel_colors&quot;" line1083="        //% strip.defl=strip" line1084="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1085="        //% color=#2699BF blockGap=10" line1086="        showColor(rgb: number) {" line1087="            rgb = rgb &gt;&gt; 0;" line1088="            this.setAllRGB(rgb);" line1089="            this.show();" line1090="        }" line1091="" line1092="        /**" line1093="         * Shows a rainbow pattern on all LEDs." line1094="         * @param startHue the start hue value for the rainbow, eg: 1" line1095="         * @param endHue the end hue value for the rainbow, eg: 360" line1096="         */" line1097="        //% blockId=&quot;neopixel_set_strip_rainbow&quot; block=&quot;%strip|显示 彩虹 从 %startHue|到 %endHue&quot;" line1098="        //% strip.defl=strip" line1099="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot; " line1100="        //% color=#2699BF blockGap=10" line1101="        showRainbow(startHue: number = 1, endHue: number = 360) {" line1102="            if (this._length &lt;= 0) return;" line1103="" line1104="            startHue = startHue &gt;&gt; 0;" line1105="            endHue = endHue &gt;&gt; 0;" line1106="            const saturation = 100;" line1107="            const luminance = 50;" line1108="            const steps = this._length;" line1109="            const direction = HueInterpolationDirection.Clockwise;" line1110="" line1111="            //hue" line1112="            const h1 = startHue;" line1113="            const h2 = endHue;" line1114="            const hDistCW = ((h2 + 360) - h1) % 360;" line1115="            const hStepCW = Math.idiv((hDistCW * 100), steps);" line1116="            const hDistCCW = ((h1 + 360) - h2) % 360;" line1117="            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);" line1118="            let hStep: number;" line1119="            if (direction === HueInterpolationDirection.Clockwise) {" line1120="                hStep = hStepCW;" line1121="            } else if (direction === HueInterpolationDirection.CounterClockwise) {" line1122="                hStep = hStepCCW;" line1123="            } else {" line1124="                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;" line1125="            }" line1126="            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation" line1127="" line1128="            //sat" line1129="            const s1 = saturation;" line1130="            const s2 = saturation;" line1131="            const sDist = s2 - s1;" line1132="            const sStep = Math.idiv(sDist, steps);" line1133="            const s1_100 = s1 * 100;" line1134="" line1135="            //lum" line1136="            const l1 = luminance;" line1137="            const l2 = luminance;" line1138="            const lDist = l2 - l1;" line1139="            const lStep = Math.idiv(lDist, steps);" line1140="            const l1_100 = l1 * 100" line1141="" line1142="            //interpolate" line1143="            if (steps === 1) {" line1144="                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))" line1145="            } else {" line1146="                this.setPixelColor(0, hsl(startHue, saturation, luminance));" line1147="                for (let t = 1; t &lt; steps - 1; t++) {" line1148="                    const u = Math.idiv((h1_100 + t * hStep), 100) + 360;" line1149="                    const v = Math.idiv((s1_100 + t * sStep), 100);" line1150="                    const w = Math.idiv((l1_100 + t * lStep), 100);" line1151="                    this.setPixelColor(t, hsl(u, v, w));" line1152="                }" line1153="                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));" line1154="            }" line1155="            this.show();" line1156="        }" line1157="" line1158="" line1159="        /**" line1160="         * Set LED to a given color (range 0-255 for r, g, b)." line1161="         * You need to call ``show`` to make the changes visible." line1162="         * @param pixeloffset position of the NeoPixel in the strip,eg: 1" line1163="         * @param rgb RGB color of the LED" line1164="         */" line1165="        //% blockId=&quot;neopixel_set_pixel_color&quot; block=&quot;%strip|设置 像素 颜色 在 %pixeloffset|到 %rgb=neopixel_colors&quot;" line1166="        //% strip.defl=strip" line1167="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1168="        //% color=#2699BF blockGap=10" line1169="        setPixelColor(pixeloffset: number, rgb: number): void {" line1170="            this.setPixelRGB(pixeloffset &gt;&gt; 0, rgb &gt;&gt; 0);" line1171="        }" line1172="" line1173="        /**" line1174="         * Send all the changes to the strip." line1175="         */" line1176="        //% blockId=&quot;neopixel_show&quot; block=&quot;%strip|显示&quot;" line1177="        //% strip.defl=strip" line1178="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1179="        //% color=#2699BF blockGap=10" line1180="        show() {" line1181="            // only supported in beta" line1182="            // ws2812b.setBufferMode(this.pin, this._mode);" line1183="            ws2812b.sendBuffer(this.buf, this.pin);" line1184="        }" line1185="" line1186="        /**" line1187="         * Turn off all LEDs." line1188="         * You need to call ``show`` to make the changes visible." line1189="         */" line1190="        //% blockId=&quot;neopixel_clear&quot; block=&quot;%strip|清除&quot;" line1191="        //% strip.defl=strip" line1192="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1193="        //% color=#2699BF blockGap=10" line1194="        clear(): void {" line1195="            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1196="            this.buf.fill(0, this.start * stride, this._length * stride);" line1197="        }" line1198="" line1199="        /**" line1200="         * Set the brightness of the strip. This flag only applies to future operation." line1201="         * @param brightness a measure of LED brightness in 0-255. eg: 255" line1202="         */" line1203="        //% blockId=&quot;neopixel_set_brightness&quot; block=&quot;%strip|设置 亮度 %brightness&quot;" line1204="        //% strip.defl=strip" line1205="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1206="        //% color=#2699BF blockGap=10" line1207="        setBrightness(brightness: number): void {" line1208="            this.brightness = brightness &amp; 0xff;" line1209="        }" line1210="" line1211="        /**" line1212="         * Set the pin where the neopixel is connected, defaults to P0." line1213="         */" line1214="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1215="        //% color=#2699BF blockGap=10" line1216="        setPin(pin: DigitalPin): void {" line1217="            this.pin = pin;" line1218="            pins.digitalWritePin(this.pin, 0);" line1219="            // don't yield to avoid races on initialization" line1220="        }" line1221="" line1222="" line1223="" line1224="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line1225="            if (this._mode === NeoPixelMode.RGB_RGB) {" line1226="                this.buf[offset + 0] = red;" line1227="                this.buf[offset + 1] = green;" line1228="            } else {" line1229="                this.buf[offset + 0] = green;" line1230="                this.buf[offset + 1] = red;" line1231="            }" line1232="            this.buf[offset + 2] = blue;" line1233="        }" line1234="" line1235="        private setAllRGB(rgb: number) {" line1236="            let red = unpackR(rgb);" line1237="            let green = unpackG(rgb);" line1238="            let blue = unpackB(rgb);" line1239="" line1240="            const br3 = this.brightness;" line1241="            if (br3 &lt; 255) {" line1242="                red = (red * br3) &gt;&gt; 8;" line1243="                green = (green * br3) &gt;&gt; 8;" line1244="                blue = (blue * br3) &gt;&gt; 8;" line1245="            }" line1246="            const end3 = this.start + this._length;" line1247="            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1248="            for (let i5 = this.start; i5 &lt; end3; ++i5) {" line1249="                this.setBufferRGB(i5 * stride6, red, green, blue)" line1250="            }" line1251="        }" line1252="        private setAllW(white: number) {" line1253="            if (this._mode !== NeoPixelMode.RGBW)" line1254="                return;" line1255="" line1256="            let br4 = this.brightness;" line1257="            if (br4 &lt; 255) {" line1258="                white = (white * br4) &gt;&gt; 8;" line1259="            }" line1260="            let buf8 = this.buf;" line1261="            let end4 = this.start + this._length;" line1262="            for (let i6 = this.start; i6 &lt; end4; ++i6) {" line1263="                let ledoffset3 = i6 * 4;" line1264="                buf8[ledoffset3 + 3] = white;" line1265="            }" line1266="        }" line1267="        private setPixelRGB(pixeloffset: number, rgb: number): void {" line1268="            if (pixeloffset &lt; 0" line1269="                || pixeloffset &gt;= this._length)" line1270="                return;" line1271="" line1272="            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1273="            pixeloffset = (pixeloffset + this.start) * stride7;" line1274="" line1275="            let red2 = unpackR(rgb);" line1276="            let green2 = unpackG(rgb);" line1277="            let blue2 = unpackB(rgb);" line1278="" line1279="            let br5 = this.brightness;" line1280="            if (br5 &lt; 255) {" line1281="                red2 = (red2 * br5) &gt;&gt; 8;" line1282="                green2 = (green2 * br5) &gt;&gt; 8;" line1283="                blue2 = (blue2 * br5) &gt;&gt; 8;" line1284="            }" line1285="            this.setBufferRGB(pixeloffset, red2, green2, blue2)" line1286="        }" line1287="        private setPixelW(pixeloffset: number, white: number): void {" line1288="            if (this._mode !== NeoPixelMode.RGBW)" line1289="                return;" line1290="" line1291="            if (pixeloffset &lt; 0" line1292="                || pixeloffset &gt;= this._length)" line1293="                return;" line1294="" line1295="            pixeloffset = (pixeloffset + this.start) * 4;" line1296="" line1297="            let br6 = this.brightness;" line1298="            if (br6 &lt; 255) {" line1299="                white = (white * br6) &gt;&gt; 8;" line1300="            }" line1301="            let buf9 = this.buf;" line1302="            buf9[pixeloffset + 3] = white;" line1303="        }" line1304="    }" line1305="" line1306="    /**" line1307="     * Create a new NeoPixel driver for `numleds` LEDs." line1308="     * @param pin the pin where the neopixel is connected." line1309="     * @param numleds number of leds in the strip, eg: 8,30,60,64" line1310="     */" line1311="    //% blockId=&quot;neopixel_create&quot; block=&quot;灯环 在 端口 %pin|用 %numleds| leds&quot;" line1312="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1313="    //% trackArgs=0,2" line1314="    //% blockSetVariable=strip" line1315="    //% color=#2699BF blockGap=10" line1316="    //% weight=51" line1317="    export function create(pin: DigitalPin, numleds: number): Strip {" line1318="        let strip2 = new Strip();" line1319="        let stride8 = NeoPixelMode.RGBW ? 4 : 3;" line1320="        strip2.buf = pins.createBuffer(numleds * stride8);" line1321="        strip2.start = 0;" line1322="        strip2._length = numleds;" line1323="        strip2._mode = NeoPixelMode.RGB;" line1324="        strip2._matrixWidth = 0;" line1325="        strip2.setBrightness(128)" line1326="        strip2.setPin(pin)" line1327="        return strip2;" line1328="    }" line1329="" line1330="    /**" line1331="     * Converts red, green, blue channels into a RGB color" line1332="     * @param red value of the red channel between 0 and 255. eg: 255" line1333="     * @param green value of the green channel between 0 and 255. eg: 255" line1334="     * @param blue value of the blue channel between 0 and 255. eg: 255" line1335="     */" line1336="    //% blockId=&quot;neopixel_rgb&quot; block=&quot;红 %red|绿 %green|蓝 %blue&quot;" line1337="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1338="    //% weight=32" line1339="    //% color=#2699BF blockGap=10" line1340="    export function rgb(red: number, green: number, blue: number): number {" line1341="        return packRGB(red, green, blue);" line1342="    }" line1343="" line1344="    /**" line1345="     * Gets the RGB value of a known color" line1346="    */" line1347="    //% blockId=&quot;neopixel_colors&quot; block=&quot;%color&quot;" line1348="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1349="    //% weight=32" line1350="    //% color=#2699BF blockGap=10" line1351="    export function colors(color: NeoPixelColors): number {" line1352="        return color;" line1353="    }" line1354="" line1355="    function packRGB(a: number, b: number, c: number): number {" line1356="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line1357="    }" line1358="" line1359="    function unpackR(rgb: number): number {" line1360="        let r3 = (rgb &gt;&gt; 16) &amp; 0xFF;" line1361="        return r3;" line1362="    }" line1363="" line1364="    function unpackG(rgb: number): number {" line1365="        let g3 = (rgb &gt;&gt; 8) &amp; 0xFF;" line1366="        return g3;" line1367="    }" line1368="" line1369="    function unpackB(rgb: number): number {" line1370="        let b3 = (rgb) &amp; 0xFF;" line1371="        return b3;" line1372="    }" line1373="" line1374="    export function hsl(h: number, s: number, l: number): number {" line1375="        h = Math.round(h);" line1376="        s = Math.round(s);" line1377="        l = Math.round(l);" line1378="" line1379="        h = h % 360;" line1380="        s = Math.clamp(0, 99, s);" line1381="        l = Math.clamp(0, 99, l);" line1382="        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]" line1383="        let h12 = Math.idiv(h, 60);//[0,6]" line1384="        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]" line1385="        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);" line1386="        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color" line1387="        let r$: number;" line1388="        let g$: number;" line1389="        let b$: number;" line1390="        if (h12 == 0) {" line1391="            r$ = c2; g$ = x; b$ = 0;" line1392="        } else if (h12 == 1) {" line1393="            r$ = x; g$ = c2; b$ = 0;" line1394="        } else if (h12 == 2) {" line1395="            r$ = 0; g$ = c2; b$ = x;" line1396="        } else if (h12 == 3) {" line1397="            r$ = 0; g$ = x; b$ = c2;" line1398="        } else if (h12 == 4) {" line1399="            r$ = x; g$ = 0; b$ = c2;" line1400="        } else if (h12 == 5) {" line1401="            r$ = c2; g$ = 0; b$ = x;" line1402="        }" line1403="        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);" line1404="        let r4 = r$ + m2;" line1405="        let g4 = g$ + m2;" line1406="        let b4 = b$ + m2;" line1407="        return packRGB(r4, g4, b4);" line1408="    }" line1409="" line1410="    export enum HueInterpolationDirection {" line1411="        Clockwise," line1412="        CounterClockwise," line1413="        Shortest" line1414="    }" line1415="}" numlines="1416"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>