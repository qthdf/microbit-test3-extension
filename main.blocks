<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="1F!o5cd:,I=YcUv)CJ|r" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="|Gy,(J(,qrFbGBU*$@1Y" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum PingUnit {" line1="    //% block=&quot;微秒&quot;" line2="    MicroSeconds," line3="    //% block=&quot;厘米&quot;" line4="    Centimeters," line5="    //% block=&quot;英寸&quot;" line6="    Inches" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="}sTAsF?li1=+)S^43tfB" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum PINs {" line1="    P0," line2="    P1," line3="    P2," line4="    P3," line5="    P4," line6="    P5," line7="    P6," line8="    P7," line9="    P8," line10="    P9," line11="    P10," line12="    P11," line13="    P12," line14="    P13," line15="    P14," line16="    P15," line17="    P16," line18="    P19," line19="    P20" line20="}" numlines="21"></mutation><next><block type="typescript_statement" id="!HdHC{2P]4Cv7_u]YjR_" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum TMP36Type {" line1="    //% block=&quot;(℃)&quot; enumval=0" line2="    TMP36_temperature_C," line3="" line4="    //% block=&quot;(℉)&quot; enumval=1" line5="    TMP36_temperature_F," line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="vcR(I]`@3bl8yKM1Ua(i" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum RGB {" line1="    //% block=&quot;红&quot;" line2="    RED," line3="    //% block=&quot;绿&quot;" line4="    GREEN," line5="    //% block=&quot;蓝&quot;" line6="    BLUE," line7="    //% block=&quot;全部&quot;" line8="    CLEAR" line9="}" numlines="10"></mutation><next><block type="typescript_statement" id="Pn4n;jHo#,GpFl0iW@i/" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelColors {" line1="    //% block=红" line2="    Red = 0xFF0000," line3="    //% block=橙" line4="    Orange = 0xFFA500," line5="    //% block=黄" line6="    Yellow = 0xFFFF00," line7="    //% block=绿" line8="    Green = 0x00FF00," line9="    //% block=蓝" line10="    Blue = 0x0000FF," line11="    //% block=靛蓝" line12="    Indigo = 0x4b0082," line13="    //% block=紫罗兰" line14="    Violet = 0x8a2be2," line15="    //% block=紫" line16="    Purple = 0xFF00FF," line17="    //% block=白" line18="    White = 0xFFFFFF," line19="    //% block=黑" line20="    Black = 0x000000" line21="}" numlines="22"></mutation><next><block type="typescript_statement" id="]wClK-|ao,kE9$.?1RaY" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelMode {" line1="    //% block=&quot;RGB (GRB 格式)&quot;" line2="    RGB = 1," line3="    //% block=&quot;RGB+W&quot;" line4="    RGBW = 2," line5="    //% block=&quot;RGB (RGB 格式)&quot;" line6="    RGB_RGB = 3" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="49NO)DxIY*|w6i72Z{1g" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Microbit {" line1="" line2="    export enum DHT11_state {" line3="        //% block=&quot;温度(℃)&quot; enumval=0" line4="        DHT11_temperature_C," line5="" line6="        //% block=&quot;湿度(0~100)&quot; enumval=1" line7="        DHT11_humidity," line8="    }" line9="" line10="    export enum Distance_Unit_List {" line11="        //% block=&quot;厘米&quot; " line12="        Distance_Unit_cm," line13="" line14="        //% block=&quot;英寸&quot;" line15="        Distance_Unit_inch," line16="    }" line17="" line18="" line19="" line20="" line21="" line22="" line23="    " line24="" line25="" line26="" line27="" line28="" line29="" line30="    //% blockId=&quot;readsoilmoisture&quot; block=&quot;土壤湿度传感器 %soilhumiditypin&quot;" line31="    //% subcategory=传感器" line32="    export function ReadSoilHumidity(soilmoisturepin: AnalogPin): number {" line33="        let voltage = 0;" line34="        let soilmoisture = 0;" line35="        voltage = pins.map(" line36="            pins.analogReadPin(soilmoisturepin)," line37="            0," line38="            1023," line39="            0," line40="            1023" line41="        );" line42="        soilmoisture = voltage;" line43="        return Math.round(soilmoisture);" line44="    }" line45="    //% blockId=&quot;readlightintensity&quot; block=&quot;光敏传感器 %lightintensitypin&quot;" line46="    //% subcategory=传感器" line47="    export function ReadLightIntensity(lightintensitypin: AnalogPin): number {" line48="        let voltage2 = 0;" line49="        let lightintensity = 0;" line50="        voltage2 = pins.map(" line51="            pins.analogReadPin(lightintensitypin)," line52="            0," line53="            1023," line54="            0," line55="            1023" line56="        );" line57="        lightintensity = voltage2;" line58="        return Math.round(1023 - lightintensity);" line59="    }" line60="    /**" line61="    * toggle fans" line62="    */" line63="    //% blockId=fans block=&quot;电机风扇 %pin 切换至 $fanstate || 速度 %speed&quot;" line64="    //% fanstate.shadow=&quot;toggleOnOff&quot;" line65="    //% speed.min=0 speed.max=1023" line66="    //% expandableArgumentMode=&quot;toggle&quot;" line67="    //% subcategory=执行器" line68="    export function motorFan(pin: AnalogPin, fanstate: boolean, speed: number = 1023): void {" line69="        if (fanstate) {" line70="            pins.analogSetPeriod(pin, 1023)" line71="            pins.analogWritePin(pin, Math.map(speed, 0, 1023, 0, 1023))" line72="        }" line73="        else {" line74="            pins.analogWritePin(pin, 0)" line75="            speed = 0" line76="        }" line77="    }" line78="" line79="    /**" line80="    * get Ultrasonic distance" line81="    */" line82="    //% blockId=sonarbit" line83="    //% distance_unit.fieldEditor=&quot;gridpicker&quot;" line84="    //% distance_unit.fieldOptions.columns=2" line85="    //% subcategory=传感器" line86="    //% blockId=sonar_ping block=&quot;超声波传感器 echo %echo trig %trig 单位 %unit&quot;" line87="    export function ping(trig: DigitalPin, echo: DigitalPin, unit: PingUnit, maxCmDistance = 500): number {" line88="        // send pulse" line89="        pins.setPull(trig, PinPullMode.PullNone);" line90="        pins.digitalWritePin(trig, 0);" line91="        control.waitMicros(2);" line92="        pins.digitalWritePin(trig, 1);" line93="        control.waitMicros(10);" line94="        pins.digitalWritePin(trig, 0);" line95="" line96="        // read pulse" line97="        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);" line98="" line99="        switch (unit) {" line100="            case PingUnit.Centimeters: return Math.idiv(d, 58);" line101="            case PingUnit.Inches: return Math.idiv(d, 148);" line102="            default: return d;" line103="        }" line104="    }" line105="" line106="    /**" line107="    * toggle led" line108="    */" line109="    //% blockId=LEDR block=&quot;红色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line110="    //% brightness.min=0 brightness.max=1023" line111="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line112="    //% expandableArgumentMode=&quot;toggle&quot;" line113="    //% subcategory=执行器" line114="    export function ledRBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line115="        if (ledstate) {" line116="            pins.analogSetPeriod(pin, 1023)" line117="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line118="        }" line119="        else {" line120="            pins.analogWritePin(pin, 1023)" line121="            brightness = 1023" line122="        }" line123="    }" line124="" line125="    /**" line126="    * toggle led" line127="    */" line128="    //% blockId=LEDG block=&quot;绿色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line129="    //% brightness.min=0 brightness.max=1023" line130="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line131="    //% expandableArgumentMode=&quot;toggle&quot;" line132="    //% subcategory=执行器" line133="    export function ledGBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line134="        if (ledstate) {" line135="            pins.analogSetPeriod(pin, 1023)" line136="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line137="        }" line138="        else {" line139="            pins.analogWritePin(pin, 1023)" line140="            brightness = 1023" line141="        }" line142="    }" line143="" line144="    /**" line145="    * toggle led" line146="    */" line147="    //% blockId=LEDB block=&quot;蓝色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line148="    //% brightness.min=0 brightness.max=1023" line149="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line150="    //% expandableArgumentMode=&quot;toggle&quot;" line151="    //% subcategory=执行器" line152="    export function ledBBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line153="        if (ledstate) {" line154="            pins.analogSetPeriod(pin, 1023)" line155="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line156="        }" line157="        else {" line158="            pins.analogWritePin(pin, 1023)" line159="            brightness = 1023" line160="        }" line161="    }" line162="" line163="    /**" line164="    * toggle led" line165="    */" line166="    //% blockId=LEDY block=&quot;黄色 LED %pin 切换到 $ledstate || 亮度 %brightness&quot;" line167="    //% brightness.min=0 brightness.max=1023" line168="    //% ledstate.shadow=&quot;toggleOnOff&quot;" line169="    //% expandableArgumentMode=&quot;toggle&quot;" line170="    //% subcategory=执行器" line171="    export function ledYBrightness(pin: AnalogPin, ledstate: boolean, brightness: number = 1023): void {" line172="        if (ledstate) {" line173="            pins.analogSetPeriod(pin, 1023)" line174="            pins.analogWritePin(pin, Math.map(brightness, 1023, 0, 0, 1023))" line175="        }" line176="        else {" line177="            pins.analogWritePin(pin, 1023)" line178="            brightness = 1023" line179="        }" line180="    }" line181="" line182="    const PCA9685_ADD = 0x40" line183="    const MODE1 = 0x00" line184="    const LED0_ON_L = 0x06" line185="    const PRESCALE = 0xFE" line186="" line187="    let initialized = false" line188="" line189="    export enum enPos {" line190="        //% blockId=&quot;forward&quot; block=&quot;前进&quot;" line191="        forward = 1," line192="        //% blockId=&quot;stop&quot; block=&quot;后退&quot;" line193="        stop = 2" line194="    }" line195="" line196="    export enum enServo {" line197="        S1 = 0," line198="        S2," line199="        S3," line200="        S4" line201="    }" line202="" line203="    export enum enMotors {" line204="        M1 = 8," line205="        M2 = 10," line206="        M3 = 12," line207="        M4 = 14" line208="    }" line209="" line210="    function i2cwrite(addr: number, reg: number, value: number) {" line211="        let buf = pins.createBuffer(2)" line212="        buf[0] = reg" line213="        buf[1] = value" line214="        pins.i2cWriteBuffer(addr, buf)" line215="    }" line216="" line217="    function i2cread(addr: number, reg: number) {" line218="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line219="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line220="        return val;" line221="    }" line222="" line223="    function initPCA9685(): void {" line224="        i2cwrite(PCA9685_ADD, MODE1, 0x00)" line225="        setFreq(50);" line226="    }" line227="" line228="    function setFreq(freq: number): void {" line229="        // Constrain the frequency" line230="        let prescaleval = 25000000;" line231="        prescaleval /= 4096;" line232="        prescaleval /= freq;" line233="        prescaleval -= 1;" line234="        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);" line235="        let oldmode = i2cread(PCA9685_ADD, MODE1);" line236="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line237="        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep" line238="        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler" line239="        i2cwrite(PCA9685_ADD, MODE1, oldmode);" line240="        control.waitMicros(5000);" line241="        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);" line242="    }" line243="" line244="    function setPwm(channel: number, on: number, off: number): void {" line245="        if (channel &lt; 0 || channel &gt; 15)" line246="            return;" line247="        if (!initialized) {" line248="            initPCA9685();" line249="        }" line250="        let buf2 = pins.createBuffer(5);" line251="        buf2[0] = LED0_ON_L + 4 * channel;" line252="        buf2[1] = on &amp; 0xff;" line253="        buf2[2] = (on &gt;&gt; 8) &amp; 0xff;" line254="        buf2[3] = off &amp; 0xff;" line255="        buf2[4] = (off &gt;&gt; 8) &amp; 0xff;" line256="        pins.i2cWriteBuffer(PCA9685_ADD, buf2);" line257="    }" line258="" line259="    //% blockId=SuperBit_Servo4 block=&quot;Geek舵机| %num|角度 %value&quot;" line260="    //% num.min=1 num.max=4 value.min=0 value.max=300" line261="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=20" line262="    //% subcategory=执行器" line263="    export function Servo4(num: enServo, value: number): void {" line264="" line265="        // 50hz: 20,000 us" line266="        let us = (value * 1800 * 0.6 / 180 + 600); // 0.6 ~ 2.4" line267="        let pwm = us * 4096 / 20000;" line268="        setPwm(num, 0, pwm);" line269="" line270="    }" line271="" line272="    //% blockId=SuperBit_MotorRun block=&quot;电机|%index|速度(-255~255) %speed&quot;" line273="    //% speed.min=-255 speed.max=255" line274="    //% subcategory=执行器" line275="    export function MotorRun(index: enMotors, speed: number): void {" line276="        if (!initialized) {" line277="            initPCA9685()" line278="        }" line279="        speed = speed * 16; // map 255 to 4096" line280="        if (speed &gt;= 4096) {" line281="            speed = 4095" line282="        }" line283="        if (speed &lt;= -4096) {" line284="            speed = -4095" line285="        }" line286="" line287="        let a = index" line288="        let b = index + 1" line289="" line290="        if (a &gt; 10) {" line291="            if (speed &gt;= 0) {" line292="                setPwm(a, 0, speed)" line293="                setPwm(b, 0, 0)" line294="            } else {" line295="                setPwm(a, 0, 0)" line296="                setPwm(b, 0, -speed)" line297="            }" line298="        }" line299="        else {" line300="            if (speed &gt;= 0) {" line301="                setPwm(b, 0, speed)" line302="                setPwm(a, 0, 0)" line303="            } else {" line304="                setPwm(b, 0, 0)" line305="                setPwm(a, 0, -speed)" line306="            }" line307="        }" line308="    }" line309="" line310="    //% blockId=&quot;elecmagnet&quot; block=&quot;电磁铁 %pin 切换至 %magState || 磁力 %force&quot;" line311="    //% magState.shadow=&quot;toggleOnOff&quot;" line312="    //% force.min=0 force.max=1023" line313="    //% expandableArgumentMode=&quot;toggle&quot;" line314="    //% subcategory=执行器" line315="    export function elecmagnet(pin: AnalogPin, magState: boolean, force: number = 1023): void {" line316="" line317="        if (magState) {" line318="            pins.analogSetPeriod(pin, 1023)" line319="            pins.analogWritePin(pin, Math.map(force, 0, 1023, 0, 1023))" line320="        }" line321="        else {" line322="            pins.analogWritePin(pin, 0)" line323="            force = 0" line324="        }" line325="    }" line326="    //% blockId=&quot;pinpullup&quot; block=&quot;巡线传感器 %pin 引脚为上拉&quot;" line327="    //% subcategory=执行器" line328="    export function pinpullup(pin: PINs): void {" line329="        switch (pin) {" line330="            case PINs.P0: pins.setPull(DigitalPin.P0, PinPullMode.PullUp);" line331="            case PINs.P1: pins.setPull(DigitalPin.P1, PinPullMode.PullUp);" line332="            case PINs.P2: pins.setPull(DigitalPin.P2, PinPullMode.PullUp);" line333="            case PINs.P3: pins.setPull(DigitalPin.P3, PinPullMode.PullUp);" line334="            case PINs.P4: pins.setPull(DigitalPin.P4, PinPullMode.PullUp);" line335="            case PINs.P5: pins.setPull(DigitalPin.P5, PinPullMode.PullUp);" line336="            case PINs.P6: pins.setPull(DigitalPin.P6, PinPullMode.PullUp);" line337="            case PINs.P7: pins.setPull(DigitalPin.P7, PinPullMode.PullUp);" line338="            case PINs.P8: pins.setPull(DigitalPin.P8, PinPullMode.PullUp);" line339="            case PINs.P9: pins.setPull(DigitalPin.P9, PinPullMode.PullUp);" line340="            case PINs.P10: pins.setPull(DigitalPin.P10, PinPullMode.PullUp);" line341="            case PINs.P11: pins.setPull(DigitalPin.P11, PinPullMode.PullUp);" line342="            case PINs.P12: pins.setPull(DigitalPin.P12, PinPullMode.PullUp);" line343="            case PINs.P13: pins.setPull(DigitalPin.P13, PinPullMode.PullUp);" line344="            case PINs.P14: pins.setPull(DigitalPin.P14, PinPullMode.PullUp);" line345="            case PINs.P15: pins.setPull(DigitalPin.P15, PinPullMode.PullUp);" line346="            case PINs.P16: pins.setPull(DigitalPin.P16, PinPullMode.PullUp);" line347="            case PINs.P19: pins.setPull(DigitalPin.P19, PinPullMode.PullUp);" line348="            case PINs.P20: pins.setPull(DigitalPin.P20, PinPullMode.PullUp);" line349="        }" line350="" line351="" line352="    }" line353="" line354="    //% blockId=&quot;laser_controller&quot; block=&quot;激光 %pin 切换至 %laserState || 激光 %intensity&quot;" line355="    //% laserState.shadow=&quot;toggleOnOff&quot;" line356="    //% intensity.min=0 intensity.max=1023" line357="    //% expandableArgumentMode=&quot;toggle&quot;" line358="    //% subcategory=执行器" line359="    export function laserController(pin: AnalogPin, laserState: boolean, intensity: number = 1023): void {" line360="" line361="        if (laserState) {" line362="            pins.analogSetPeriod(pin, 1023)" line363="            pins.analogWritePin(pin, Math.map(intensity, 0, 1023, 0, 1023))" line364="        }" line365="        else {" line366="            pins.analogWritePin(pin, 0)" line367="            intensity = 0" line368="        }" line369="    }" line370="" line371="    //% blockId=&quot;octopus_ReadWaterLevel&quot; block=&quot;水位传感器 %waterlevelpin&quot;" line372="    //% subcategory=传感器" line373="    export function ReadWaterLevel(waterlevelpin: AnalogPin): number {" line374="        let voltage4 = 0;" line375="        let waterLevel = 0;" line376="        voltage4 = pins.map(" line377="            pins.analogReadPin(waterlevelpin)," line378="            0," line379="            1023," line380="            0," line381="            1023" line382="        );" line383="        waterLevel = voltage4;" line384="        return Math.round(waterLevel);" line385="    }" line386="" line387="    //% blockId=&quot;ReadGasConcentration&quot; block=&quot;可燃气体传感器 %gasconcentrationpin&quot;" line388="    //% subcategory=传感器" line389="    export function ReadGasConcentration(gasconcentrationpin: AnalogPin): number {" line390="        let voltage5 = 0;" line391="        let gasConcentration = 0;" line392="        voltage5 = pins.map(" line393="            pins.analogReadPin(gasconcentrationpin)," line394="            0," line395="            1023," line396="            0," line397="            1023" line398="        );" line399="        gasConcentration = voltage5;" line400="        return Math.round(gasConcentration);" line401="    }" line402="" line403="    //% blockId=&quot;Readflame&quot; block=&quot;火焰传感器 %flamepin&quot;" line404="    //% subcategory=传感器" line405="    export function Readflame(flamepin: AnalogPin): number {" line406="        let voltage6 = 0;" line407="        let flame = 0;" line408="        voltage6 = pins.map(" line409="            pins.analogReadPin(flamepin)," line410="            0," line411="            1023," line412="            0," line413="            1023" line414="        );" line415="        flame = voltage6;" line416="        return Math.round(flame);" line417="    }" line418="" line419="    //% blockId=&quot;ReadGrayLevel&quot; block=&quot;灰度传感器 %graylevelpin&quot;" line420="    //% subcategory=传感器" line421="    export function ReadGrayLevel(graylevelpin: AnalogPin): number {" line422="        let voltage7 = 0;" line423="        let grayLevel = 0;" line424="        voltage7 = pins.map(" line425="            pins.analogReadPin(graylevelpin)," line426="            0," line427="            1023," line428="            80," line429="            1023" line430="        );" line431="        grayLevel = voltage7;" line432="        return Math.round(grayLevel);" line433="    }" line434="" line435="    //% blockId=&quot;readWaterTemp&quot; block=&quot;防水温度传感器 %waterproofpin&quot;" line436="    //% subcategory=传感器" line437="    export function readWaterTemp(waterproofpin: AnalogPin): number {" line438="        let voltage22 = 0;" line439="        let waterProofTemp = 0;" line440="        voltage22 = pins.analogReadPin(waterproofpin);//%获得原始值" line441="        if (voltage22 &gt; 1001) { waterProofTemp = 100; }" line442="        else if (voltage22 &gt; 1000) { waterProofTemp = 98; }" line443="        else if (voltage22 &gt; 999) { waterProofTemp = 97; }" line444="        else if (voltage22 &gt; 998) { waterProofTemp = 96; }" line445="        else if (voltage22 &gt; 997) { waterProofTemp = 95; }" line446="        else if (voltage22 &gt; 996) { waterProofTemp = 93; }" line447="        else if (voltage22 &gt; 995) { waterProofTemp = 92; }" line448="        else if (voltage22 &gt; 994) { waterProofTemp = 91; }" line449="        else if (voltage22 &gt; 993) { waterProofTemp = 90; }" line450="        else if (voltage22 &gt; 992) { waterProofTemp = 89; }" line451="        else if (voltage22 &gt; 991) { waterProofTemp = 88; }" line452="        else if (voltage22 &gt; 990) { waterProofTemp = 87; }" line453="        else if (voltage22 &gt; 989) { waterProofTemp = 86; }" line454="        else if (voltage22 &gt; 988) { waterProofTemp = 85; }" line455="        else if (voltage22 &gt; 987) { waterProofTemp = 84; }" line456="        else if (voltage22 &gt; 986) { waterProofTemp = 83; }" line457="        else if (voltage22 &gt; 985) { waterProofTemp = 82; }" line458="        else if (voltage22 &gt; 984) { waterProofTemp = 81; }" line459="        else if (voltage22 &gt; 982) { waterProofTemp = 80; }" line460="        else if (voltage22 &gt; 981) { waterProofTemp = 79; }" line461="        else if (voltage22 &gt; 980) { waterProofTemp = 78; }" line462="        else if (voltage22 &gt; 978) { waterProofTemp = 77; }" line463="        else if (voltage22 &gt; 977) { waterProofTemp = 76; }" line464="        else if (voltage22 &gt; 975) { waterProofTemp = 75; }" line465="        else if (voltage22 &gt; 974) { waterProofTemp = 74; }" line466="        else if (voltage22 &gt; 972) { waterProofTemp = 73; }" line467="        else if (voltage22 &gt; 971) { waterProofTemp = 72; }" line468="        else if (voltage22 &gt; 969) { waterProofTemp = 71; }" line469="        else if (voltage22 &gt; 967) { waterProofTemp = 70; }" line470="        else if (voltage22 &gt; 965) { waterProofTemp = 69; }" line471="        else if (voltage22 &gt; 963) { waterProofTemp = 68; }" line472="        else if (voltage22 &gt; 961) { waterProofTemp = 67; }" line473="        else if (voltage22 &gt; 959) { waterProofTemp = 66; }" line474="        else if (voltage22 &gt; 957) { waterProofTemp = 65; }" line475="        else if (voltage22 &gt; 955) { waterProofTemp = 64; }" line476="        else if (voltage22 &gt; 953) { waterProofTemp = 63; }" line477="        else if (voltage22 &gt; 950) { waterProofTemp = 62; }" line478="        else if (voltage22 &gt; 948) { waterProofTemp = 61; }" line479="        else if (voltage22 &gt; 943) { waterProofTemp = 59; }" line480="        else if (voltage22 &gt; 940) { waterProofTemp = 58; }" line481="        else if (voltage22 &gt; 937) { waterProofTemp = 57; }" line482="        else if (voltage22 &gt; 934) { waterProofTemp = 56; }" line483="        else if (voltage22 &gt; 931) { waterProofTemp = 55; }" line484="        else if (voltage22 &gt; 928) { waterProofTemp = 54; }" line485="        else if (voltage22 &gt; 924) { waterProofTemp = 53; }" line486="        else if (voltage22 &gt; 921) { waterProofTemp = 52; }" line487="        else if (voltage22 &gt; 917) { waterProofTemp = 51; }" line488="        else if (voltage22 &gt; 914) { waterProofTemp = 51; }" line489="        else if (voltage22 &gt; 910) { waterProofTemp = 49; }" line490="        else if (voltage22 &gt; 906) { waterProofTemp = 48; }" line491="        else if (voltage22 &gt; 902) { waterProofTemp = 47; }" line492="        else if (voltage22 &gt; 898) { waterProofTemp = 46; }" line493="        else if (voltage22 &gt; 893) { waterProofTemp = 45; }" line494="        else if (voltage22 &gt; 889) { waterProofTemp = 44; }" line495="        else if (voltage22 &gt; 884) { waterProofTemp = 43; }" line496="        else if (voltage22 &gt; 879) { waterProofTemp = 42; }" line497="        else if (voltage22 &gt; 874) { waterProofTemp = 41; }" line498="        else if (voltage22 &gt; 869) { waterProofTemp = 40; }" line499="        else if (voltage22 &gt; 864) { waterProofTemp = 39; }" line500="        else if (voltage22 &gt; 858) { waterProofTemp = 38; }" line501="        else if (voltage22 &gt; 852) { waterProofTemp = 37; }" line502="        else if (voltage22 &gt; 846) { waterProofTemp = 36; }" line503="        else if (voltage22 &gt; 840) { waterProofTemp = 35; }" line504="        else if (voltage22 &gt; 834) { waterProofTemp = 34; }" line505="        else if (voltage22 &gt; 827) { waterProofTemp = 33; }" line506="        else if (voltage22 &gt; 821) { waterProofTemp = 32; }" line507="        else if (voltage22 &gt; 814) { waterProofTemp = 31; }" line508="        else if (voltage22 &gt; 806) { waterProofTemp = 30; }" line509="        else if (voltage22 &gt; 799) { waterProofTemp = 29; }" line510="        else if (voltage22 &gt; 791) { waterProofTemp = 28; }" line511="        else if (voltage22 &gt; 784) { waterProofTemp = 27; }" line512="        else if (voltage22 &gt; 776) { waterProofTemp = 26; }" line513="        else if (voltage22 &gt; 767) { waterProofTemp = 25; }" line514="        else if (voltage22 &gt; 759) { waterProofTemp = 24; }" line515="        else if (voltage22 &gt; 750) { waterProofTemp = 23; }" line516="        else if (voltage22 &gt; 741) { waterProofTemp = 22; }" line517="        else if (voltage22 &gt; 732) { waterProofTemp = 21; }" line518="        else if (voltage22 &gt; 713) { waterProofTemp = 19; }" line519="        else if (voltage22 &gt; 703) { waterProofTemp = 18; }" line520="        else if (voltage22 &gt; 692) { waterProofTemp = 17; }" line521="        else if (voltage22 &gt; 682) { waterProofTemp = 16; }" line522="        else if (voltage22 &gt; 671) { waterProofTemp = 15; }" line523="        else if (voltage22 &gt; 661) { waterProofTemp = 14; }" line524="        else if (voltage22 &gt; 650) { waterProofTemp = 13; }" line525="        else if (voltage22 &gt; 638) { waterProofTemp = 12; }" line526="        else if (voltage22 &gt; 627) { waterProofTemp = 11; }" line527="        else if (voltage22 &gt; 615) { waterProofTemp = 10; }" line528="        else if (voltage22 &gt; 604) { waterProofTemp = 9; }" line529="        else if (voltage22 &gt; 592) { waterProofTemp = 8; }" line530="        else if (voltage22 &gt; 579) { waterProofTemp = 7; }" line531="        else if (voltage22 &gt; 567) { waterProofTemp = 6; }" line532="        else if (voltage22 &gt; 555) { waterProofTemp = 5; }" line533="        else if (voltage22 &gt; 542) { waterProofTemp = 4; }" line534="        else if (voltage22 &gt; 530) { waterProofTemp = 3; }" line535="        else if (voltage22 &gt; 517) { waterProofTemp = 2; }" line536="        else if (voltage22 &gt; 504) { waterProofTemp = 1; }" line537="        else { waterProofTemp = 0; }" line538="        return waterProofTemp;" line539="    }" line540="" line541="    //% blockId=potentiometerRead" line542="    //% block=&quot;电位器 %pin&quot;" line543="    //% subcategory=传感器" line544="    export function potentiometerRead(pin: AnalogPin): number {" line545="        return pins.analogReadPin(pin);" line546="    }" line547="" line548="    //% blockId=buttonState" line549="    //% block=&quot;按钮传感器 %pin&quot;" line550="    //% subcategory=传感器" line551="    export function buttonState(pin: DigitalPin): number {" line552="" line553="        return pins.digitalReadPin(pin);" line554="    }" line555="    //% blockId=followState" line556="    //% block=&quot;巡线传感器 %pin&quot;" line557="    //% subcategory=传感器" line558="    export function followState(pin: PINs): number {" line559="        switch (pin) {" line560="            case PINs.P0: return pins.digitalReadPin(DigitalPin.P0);" line561="            case PINs.P1: return pins.digitalReadPin(DigitalPin.P1);" line562="            case PINs.P2: return pins.digitalReadPin(DigitalPin.P2);" line563="            case PINs.P3: return pins.digitalReadPin(DigitalPin.P3);" line564="            case PINs.P4: return pins.digitalReadPin(DigitalPin.P4);" line565="            case PINs.P5: return pins.digitalReadPin(DigitalPin.P5);" line566="            case PINs.P6: return pins.digitalReadPin(DigitalPin.P6);" line567="            case PINs.P7: return pins.digitalReadPin(DigitalPin.P7);" line568="            case PINs.P8: return pins.digitalReadPin(DigitalPin.P8);" line569="            case PINs.P9: return pins.digitalReadPin(DigitalPin.P9);" line570="            case PINs.P10: return pins.digitalReadPin(DigitalPin.P10);" line571="            case PINs.P11: return pins.digitalReadPin(DigitalPin.P11);" line572="            case PINs.P12: return pins.digitalReadPin(DigitalPin.P12);" line573="            case PINs.P13: return pins.digitalReadPin(DigitalPin.P13);" line574="            case PINs.P14: return pins.digitalReadPin(DigitalPin.P14);" line575="            case PINs.P15: return pins.digitalReadPin(DigitalPin.P15);" line576="            case PINs.P16: return pins.digitalReadPin(DigitalPin.P16);" line577="            case PINs.P19: return pins.digitalReadPin(DigitalPin.P19);" line578="            case PINs.P20: return pins.digitalReadPin(DigitalPin.P20);" line579="" line580="        }" line581="" line582="    }" line583="" line584="    //% blockId=farState" line585="    //% block=&quot;远距离光电传感器 %pin&quot;" line586="    //% subcategory=传感器" line587="    export function farState(pin: DigitalPin): number {" line588="        return pins.digitalReadPin(pin);" line589="    }" line590="" line591="    //% blockId=hState" line592="    //% block=&quot;霍尔传感器 %pin&quot;" line593="    //% subcategory=传感器" line594="    export function hState(pin: DigitalPin): number {" line595="        return pins.digitalReadPin(pin);" line596="    }" line597="" line598="    enum LCS_Constants {" line599="        // Constants" line600="        ADDRESS = 0x29," line601="        ID = 0x12, // Register should be equal to 0x44 for the TCS34721 or TCS34725, or 0x4D for the TCS34723 or TCS34727." line602="" line603="        COMMAND_BIT = 0x80," line604="" line605="        ENABLE = 0x00," line606="        ENABLE_AIEN = 0x10, // RGBC Interrupt Enable" line607="        ENABLE_WEN = 0x08, // Wait enable - Writing 1 activates the wait timer" line608="        ENABLE_AEN = 0x02, // RGBC Enable - Writing 1 actives the ADC, 0 disables it" line609="        ENABLE_PON = 0x01, // Power on - Writing 1 activates the internal oscillator, 0 disables it" line610="        ATIME = 0x01, // Integration time" line611="        WTIME = 0x03, // Wait time (if ENABLE_WEN is asserted)" line612="        AILTL = 0x04, // Clear channel lower interrupt threshold" line613="        AILTH = 0x05," line614="        AIHTL = 0x06, // Clear channel upper interrupt threshold" line615="        AIHTH = 0x07," line616="        PERS = 0x0C, // Persistence register - basic SW filtering mechanism for interrupts" line617="        PERS_NONE = 0x00, // Every RGBC cycle generates an interrupt" line618="        PERS_1_CYCLE = 0x01, // 1 clean channel value outside threshold range generates an interrupt" line619="        PERS_2_CYCLE = 0x02, // 2 clean channel values outside threshold range generates an interrupt" line620="        PERS_3_CYCLE = 0x03, // 3 clean channel values outside threshold range generates an interrupt" line621="        PERS_5_CYCLE = 0x04, // 5 clean channel values outside threshold range generates an interrupt" line622="        PERS_10_CYCLE = 0x05, // 10 clean channel values outside threshold range generates an interrupt" line623="        PERS_15_CYCLE = 0x06, // 15 clean channel values outside threshold range generates an interrupt" line624="        PERS_20_CYCLE = 0x07, // 20 clean channel values outside threshold range generates an interrupt" line625="        PERS_25_CYCLE = 0x08, // 25 clean channel values outside threshold range generates an interrupt" line626="        PERS_30_CYCLE = 0x09, // 30 clean channel values outside threshold range generates an interrupt" line627="        PERS_35_CYCLE = 0x0A, // 35 clean channel values outside threshold range generates an interrupt" line628="        PERS_40_CYCLE = 0x0B, // 40 clean channel values outside threshold range generates an interrupt" line629="        PERS_45_CYCLE = 0x0C, // 45 clean channel values outside threshold range generates an interrupt" line630="        PERS_50_CYCLE = 0x0D, // 50 clean channel values outside threshold range generates an interrupt" line631="        PERS_55_CYCLE = 0x0E, // 55 clean channel values outside threshold range generates an interrupt" line632="        PERS_60_CYCLE = 0x0F, // 60 clean channel values outside threshold range generates an interrupt" line633="        CONFIG = 0x0D," line634="        CONFIG_WLONG = 0x02, // Choose between short and long (12x) wait times via WTIME" line635="        CONTROL = 0x0F, // Set the gain level for the sensor" line636="        STATUS = 0x13," line637="        STATUS_AINT = 0x10, // RGBC Clean channel interrupt" line638="        STATUS_AVALID = 0x01, // Indicates that the RGBC channels have completed an integration cycle" line639="" line640="        CDATAL = 0x14, // Clear channel data" line641="        CDATAH = 0x15," line642="        RDATAL = 0x16, // Red channel data" line643="        RDATAH = 0x17," line644="        GDATAL = 0x18, // Green channel data" line645="        GDATAH = 0x19," line646="        BDATAL = 0x1A, // Blue channel data" line647="        BDATAH = 0x1B," line648="" line649="        GAIN_1X = 0x00, //  1x gain" line650="        GAIN_4X = 0x01, //  4x gain" line651="        GAIN_16X = 0x02, // 16x gain" line652="        GAIN_60X = 0x03  // 60x gain" line653="    }" line654="" line655="    let LCS_integration_time_val = 0" line656="" line657="    // I2C functions" line658="" line659="    function I2C_WriteReg8(addr: number, reg: number, val: number) {" line660="        let buf3 = pins.createBuffer(2)" line661="        buf3.setNumber(NumberFormat.UInt8BE, 0, reg)" line662="        buf3.setNumber(NumberFormat.UInt8BE, 1, val)" line663="        pins.i2cWriteBuffer(addr, buf3)" line664="    }" line665="" line666="    function I2C_ReadReg8(addr: number, reg: number): number {" line667="        let buf4 = pins.createBuffer(1)" line668="        buf4.setNumber(NumberFormat.UInt8BE, 0, reg)" line669="        pins.i2cWriteBuffer(addr, buf4)" line670="        buf4 = pins.i2cReadBuffer(addr, 1)" line671="        return buf4.getNumber(NumberFormat.UInt8BE, 0);" line672="    }" line673="" line674="    function I2C_ReadReg16(addr: number, reg: number): number {" line675="        let buf5 = pins.createBuffer(1)" line676="        buf5.setNumber(NumberFormat.UInt8BE, 0, reg)" line677="        pins.i2cWriteBuffer(addr, buf5)" line678="        buf5 = pins.i2cReadBuffer(addr, 2)" line679="        // Little endian" line680="        return ((buf5.getNumber(NumberFormat.UInt8BE, 1) &lt;&lt; 8) | buf5.getNumber(NumberFormat.UInt8BE, 0));" line681="    }" line682="    function LCS_get_raw_data(delay: boolean = false): number[] {" line683="        if (delay) {" line684="            // Delay for the integration time to allow reading immediately after the previous read." line685="            basic.pause((256 - LCS_integration_time_val) * 2.4)" line686="        }" line687="" line688="        let div = (256 - LCS_integration_time_val) * 1024" line689="        let rgbc = [0, 0, 0, 0]" line690="        rgbc[0] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.RDATAL)) / div" line691="        rgbc[1] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.GDATAL)) / div" line692="        rgbc[2] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.BDATAL)) / div" line693="        rgbc[3] = I2C_ReadReg16(LCS_Constants.ADDRESS, (LCS_Constants.COMMAND_BIT | LCS_Constants.CDATAL)) / div" line694="        if (rgbc[0] &gt; 1) {" line695="            rgbc[0] = 1" line696="        }" line697="        if (rgbc[1] &gt; 1) {" line698="            rgbc[1] = 1" line699="        }" line700="        if (rgbc[2] &gt; 1) {" line701="            rgbc[2] = 1" line702="        }" line703="        if (rgbc[3] &gt; 1) {" line704="            rgbc[3] = 1" line705="        }" line706="        return rgbc" line707="    }" line708="" line709="    let font: number[] = [];" line710="    font[0] = 0x0022d422;" line711="    font[1] = 0x0022d422;" line712="    font[2] = 0x0022d422;" line713="    font[3] = 0x0022d422;" line714="    font[4] = 0x0022d422;" line715="    font[5] = 0x0022d422;" line716="    font[6] = 0x0022d422;" line717="    font[7] = 0x0022d422;" line718="    font[8] = 0x0022d422;" line719="    font[9] = 0x0022d422;" line720="    font[10] = 0x0022d422;" line721="    font[11] = 0x0022d422;" line722="    font[12] = 0x0022d422;" line723="    font[13] = 0x0022d422;" line724="    font[14] = 0x0022d422;" line725="    font[15] = 0x0022d422;" line726="    font[16] = 0x0022d422;" line727="    font[17] = 0x0022d422;" line728="    font[18] = 0x0022d422;" line729="    font[19] = 0x0022d422;" line730="    font[20] = 0x0022d422;" line731="    font[21] = 0x0022d422;" line732="    font[22] = 0x0022d422;" line733="    font[23] = 0x0022d422;" line734="    font[24] = 0x0022d422;" line735="    font[25] = 0x0022d422;" line736="    font[26] = 0x0022d422;" line737="    font[27] = 0x0022d422;" line738="    font[28] = 0x0022d422;" line739="    font[29] = 0x0022d422;" line740="    font[30] = 0x0022d422;" line741="    font[31] = 0x0022d422;" line742="    font[32] = 0x00000000;" line743="    font[33] = 0x000002e0;" line744="    font[34] = 0x00018060;" line745="    font[35] = 0x00afabea;" line746="    font[36] = 0x00aed6ea;" line747="    font[37] = 0x01991133;" line748="    font[38] = 0x010556aa;" line749="    font[39] = 0x00000060;" line750="    font[40] = 0x000045c0;" line751="    font[41] = 0x00003a20;" line752="    font[42] = 0x00051140;" line753="    font[43] = 0x00023880;" line754="    font[44] = 0x00002200;" line755="    font[45] = 0x00021080;" line756="    font[46] = 0x00000100;" line757="    font[47] = 0x00111110;" line758="    font[48] = 0x0007462e;" line759="    font[49] = 0x00087e40;" line760="    font[50] = 0x000956b9;" line761="    font[51] = 0x0005d629;" line762="    font[52] = 0x008fa54c;" line763="    font[53] = 0x009ad6b7;" line764="    font[54] = 0x008ada88;" line765="    font[55] = 0x00119531;" line766="    font[56] = 0x00aad6aa;" line767="    font[57] = 0x0022b6a2;" line768="    font[58] = 0x00000140;" line769="    font[59] = 0x00002a00;" line770="    font[60] = 0x0008a880;" line771="    font[61] = 0x00052940;" line772="    font[62] = 0x00022a20;" line773="    font[63] = 0x0022d422;" line774="    font[64] = 0x00e4d62e;" line775="    font[65] = 0x000f14be;" line776="    font[66] = 0x000556bf;" line777="    font[67] = 0x0008c62e;" line778="    font[68] = 0x0007463f;" line779="    font[69] = 0x0008d6bf;" line780="    font[70] = 0x000094bf;" line781="    font[71] = 0x00cac62e;" line782="    font[72] = 0x000f909f;" line783="    font[73] = 0x000047f1;" line784="    font[74] = 0x0017c629;" line785="    font[75] = 0x0008a89f;" line786="    font[76] = 0x0008421f;" line787="    font[77] = 0x01f1105f;" line788="    font[78] = 0x01f4105f;" line789="    font[79] = 0x0007462e;" line790="    font[80] = 0x000114bf;" line791="    font[81] = 0x000b6526;" line792="    font[82] = 0x010514bf;" line793="    font[83] = 0x0004d6b2;" line794="    font[84] = 0x0010fc21;" line795="    font[85] = 0x0007c20f;" line796="    font[86] = 0x00744107;" line797="    font[87] = 0x01f4111f;" line798="    font[88] = 0x000d909b;" line799="    font[89] = 0x00117041;" line800="    font[90] = 0x0008ceb9;" line801="    font[91] = 0x0008c7e0;" line802="    font[92] = 0x01041041;" line803="    font[93] = 0x000fc620;" line804="    font[94] = 0x00010440;" line805="    font[95] = 0x01084210;" line806="    font[96] = 0x00000820;" line807="    font[97] = 0x010f4a4c;" line808="    font[98] = 0x0004529f;" line809="    font[99] = 0x00094a4c;" line810="    font[100] = 0x000fd288;" line811="    font[101] = 0x000956ae;" line812="    font[102] = 0x000097c4;" line813="    font[103] = 0x0007d6a2;" line814="    font[104] = 0x000c109f;" line815="    font[105] = 0x000003a0;" line816="    font[106] = 0x0006c200;" line817="    font[107] = 0x0008289f;" line818="    font[108] = 0x000841e0;" line819="    font[109] = 0x01e1105e;" line820="    font[110] = 0x000e085e;" line821="    font[111] = 0x00064a4c;" line822="    font[112] = 0x0002295e;" line823="    font[113] = 0x000f2944;" line824="    font[114] = 0x0001085c;" line825="    font[115] = 0x00012a90;" line826="    font[116] = 0x010a51e0;" line827="    font[117] = 0x010f420e;" line828="    font[118] = 0x00644106;" line829="    font[119] = 0x01e8221e;" line830="    font[120] = 0x00093192;" line831="    font[121] = 0x00222292;" line832="    font[122] = 0x00095b52;" line833="    font[123] = 0x0008fc80;" line834="    font[124] = 0x000003e0;" line835="    font[125] = 0x000013f1;" line836="    font[126] = 0x00841080;" line837="    font[127] = 0x0022d422;" line838="" line839="    let _I2CAddr = 0;" line840="    let _screen = pins.createBuffer(1025);" line841="    let _buf2 = pins.createBuffer(2);" line842="    let _buf3 = pins.createBuffer(3);" line843="    let _buf4 = pins.createBuffer(4);" line844="    let _ZOOM = 1;" line845="" line846="    function cmd1(d: number) {" line847="        let n = d % 256;" line848="        pins.i2cWriteNumber(_I2CAddr, n, NumberFormat.UInt16BE);" line849="    }" line850="" line851="    function cmd2(d1: number, d2: number) {" line852="        _buf3[0] = 0;" line853="        _buf3[1] = d1;" line854="        _buf3[2] = d2;" line855="        pins.i2cWriteBuffer(_I2CAddr, _buf3);" line856="    }" line857="" line858="    function cmd3(d1: number, d2: number, d3: number) {" line859="        _buf4[0] = 0;" line860="        _buf4[1] = d1;" line861="        _buf4[2] = d2;" line862="        _buf4[3] = d3;" line863="        pins.i2cWriteBuffer(_I2CAddr, _buf4);" line864="    }" line865="" line866="    function set_pos(col: number = 0, page: number = 0) {" line867="        cmd1(0xb0 | page) // page number" line868="        let c = col * (_ZOOM + 1)" line869="        cmd1(0x00 | (c % 16)) // lower start column address" line870="        cmd1(0x10 | (c &gt;&gt; 4)) // upper start column address    " line871="    }" line872="" line873="    // clear bit" line874="    function clrbit(d: number, b: number): number {" line875="        if (d &amp; (1 &lt;&lt; b))" line876="            d -= (1 &lt;&lt; b)" line877="        return d" line878="    }" line879="" line880="    /**" line881="     * show text in OLED" line882="     * @param x is X alis, eg: 0" line883="     * @param y is Y alis, eg: 0" line884="     * @param s is the text will be show, eg: 'Hello!'" line885="     */" line886="    //% blockId=&quot;OLED12864_I2C_SHOWSTRING1&quot; block=&quot;显示 文本 在 x %x|y %y|文本 %s&quot;" line887="    //% parts=OLED12864_I2C trackArgs=0" line888="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line889="    //% weight=80 blockGap=10 color=#0855AA" line890="    export function showString(x: number, y: number, s: string, color: number = 1) {" line891="        let col2 = 0" line892="        let q = 0" line893="        let ind2 = 0" line894="        for (let r = 0; r &lt; s.length; r++) {" line895="            q = font[s.charCodeAt(r)]" line896="            for (let k = 0; k &lt; 5; k++) {" line897="                col2 = 0" line898="                for (let l = 0; l &lt; 5; l++) {" line899="                    if (q &amp; (1 &lt;&lt; (5 * k + l)))" line900="                        col2 |= (1 &lt;&lt; (l + 1))" line901="                }" line902="                ind2 = (x + r) * 5 * (_ZOOM + 1) + y * 128 + k * (_ZOOM + 1) + 1" line903="                if (color == 0)" line904="                    col2 = 255 - col2" line905="                _screen[ind2] = col2" line906="                if (_ZOOM)" line907="                    _screen[ind2 + 1] = col2" line908="            }" line909="        }" line910="        set_pos(x * 5, y)" line911="        let ind02 = x * 5 * (_ZOOM + 1) + y * 128" line912="        let buf7 = _screen.slice(ind02, ind2 + 1)" line913="        buf7[0] = 0x40" line914="        pins.i2cWriteBuffer(_I2CAddr, buf7)" line915="    }" line916="" line917="    /**" line918="     * show a number in OLED" line919="     * @param x is X alis, eg: 0" line920="     * @param y is Y alis, eg: 0" line921="     * @param num is the number will be show, eg: 12" line922="     * @param color is number color, eg: 1" line923="     */" line924="    //% blockId=&quot;OLED12864_I2C_NUMBER&quot; block=&quot;显示 数字 在 x %x|y %y|数字 %num&quot;" line925="    //% parts=OLED12864_I2C trackArgs=0" line926="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line927="    //% weight=80 blockGap=10 color=#0855AA" line928="    export function showNumber(x: number, y: number, num: number, color: number = 1) {" line929="        showString(x, y, num.toString(), color)" line930="    }" line931="" line932="" line933="    export function draw() {" line934="        set_pos()" line935="        pins.i2cWriteBuffer(_I2CAddr, _screen)" line936="    }" line937="" line938="    /**" line939="     * clear screen" line940="     */" line941="    //% blockId=&quot;OLED12864_I2C_CLEAR&quot; block=&quot;清除&quot;" line942="    //% parts=OLED12864_I2C trackArgs=0" line943="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line944="    //% weight=63 blockGap=10 color=#0855AA" line945="    export function clear() {" line946="        _screen.fill(0)" line947="        _screen[0] = 0x40" line948="        draw()" line949="    }" line950="" line951="    /**" line952="     * OLED initialize" line953="     * @param addr is i2c addr, eg: 60" line954="     */" line955="    //% blockId=&quot;OLED12864_I2C_init&quot; block=&quot;初始化 OLED 地址为 %addr&quot;" line956="    //% parts=OLED12864_I2C trackArgs=0" line957="    //% weight=85 blockGap=10" line958="    //% group=&quot;OLED显示屏&quot; subcategory=执行器" line959="    //% blockGap=10  color=#0855AA" line960="    export function init(addr: number) {" line961="        _I2CAddr = addr;" line962="        cmd1(0xAE)       // SSD1306_DISPLAYOFF" line963="        cmd1(0xA4)       // SSD1306_DISPLAYALLON_RESUME" line964="        cmd2(0xD5, 0xF0) // SSD1306_SETDISPLAYCLOCKDIV" line965="        cmd2(0xA8, 0x3F) // SSD1306_SETMULTIPLEX" line966="        cmd2(0xD3, 0x00) // SSD1306_SETDISPLAYOFFSET" line967="        cmd1(0 | 0x0)    // line #SSD1306_SETSTARTLINE" line968="        cmd2(0x8D, 0x14) // SSD1306_CHARGEPUMP" line969="        cmd2(0x20, 0x00) // SSD1306_MEMORYMODE" line970="        cmd3(0x21, 0, 127) // SSD1306_COLUMNADDR" line971="        cmd3(0x22, 0, 63)  // SSD1306_PAGEADDR" line972="        cmd1(0xa0 | 0x1) // SSD1306_SEGREMAP" line973="        cmd1(0xc8)       // SSD1306_COMSCANDEC" line974="        cmd2(0xDA, 0x12) // SSD1306_SETCOMPINS" line975="        cmd2(0x81, 0xCF) // SSD1306_SETCONTRAST" line976="        cmd2(0xd9, 0xF1) // SSD1306_SETPRECHARGE" line977="        cmd2(0xDB, 0x40) // SSD1306_SETVCOMDETECT" line978="        cmd1(0xA6)       // SSD1306_NORMALDISPLAY" line979="        cmd2(0xD6, 1)    // zoom on" line980="        cmd1(0xAF)       // SSD1306_DISPLAYON" line981="        clear()" line982="        _ZOOM = 1" line983="    }" line984="" line985="    /**" line986="     * A NeoPixel strip" line987="     */" line988="    export class Strip {" line989="        buf: Buffer;" line990="        pin: DigitalPin;" line991="        // TODO: encode as bytes instead of 32bit" line992="        brightness: number;" line993="        start: number; // start offset in LED strip" line994="        _length: number; // number of LEDs" line995="        _mode: NeoPixelMode;" line996="        _matrixWidth: number; // number of leds in a matrix - if any" line997="" line998="        /**" line999="         * Shows all LEDs to a given color (range 0-255 for r, g, b)." line1000="         * @param rgb RGB color of the LED" line1001="         */" line1002="        //% blockId=&quot;neopixel_set_strip_color&quot; block=&quot;%strip|显示 颜色 %rgb=neopixel_colors&quot;" line1003="        //% strip.defl=strip" line1004="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1005="        //% color=#2699BF blockGap=10" line1006="        showColor(rgb: number) {" line1007="            rgb = rgb &gt;&gt; 0;" line1008="            this.setAllRGB(rgb);" line1009="            this.show();" line1010="        }" line1011="" line1012="        /**" line1013="         * Shows a rainbow pattern on all LEDs." line1014="         * @param startHue the start hue value for the rainbow, eg: 1" line1015="         * @param endHue the end hue value for the rainbow, eg: 360" line1016="         */" line1017="        //% blockId=&quot;neopixel_set_strip_rainbow&quot; block=&quot;%strip|显示 彩虹 从 %startHue|到 %endHue&quot;" line1018="        //% strip.defl=strip" line1019="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot; " line1020="        //% color=#2699BF blockGap=10" line1021="        showRainbow(startHue: number = 1, endHue: number = 360) {" line1022="            if (this._length &lt;= 0) return;" line1023="" line1024="            startHue = startHue &gt;&gt; 0;" line1025="            endHue = endHue &gt;&gt; 0;" line1026="            const saturation = 100;" line1027="            const luminance = 50;" line1028="            const steps = this._length;" line1029="            const direction = HueInterpolationDirection.Clockwise;" line1030="" line1031="            //hue" line1032="            const h1 = startHue;" line1033="            const h2 = endHue;" line1034="            const hDistCW = ((h2 + 360) - h1) % 360;" line1035="            const hStepCW = Math.idiv((hDistCW * 100), steps);" line1036="            const hDistCCW = ((h1 + 360) - h2) % 360;" line1037="            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);" line1038="            let hStep: number;" line1039="            if (direction === HueInterpolationDirection.Clockwise) {" line1040="                hStep = hStepCW;" line1041="            } else if (direction === HueInterpolationDirection.CounterClockwise) {" line1042="                hStep = hStepCCW;" line1043="            } else {" line1044="                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;" line1045="            }" line1046="            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation" line1047="" line1048="            //sat" line1049="            const s1 = saturation;" line1050="            const s2 = saturation;" line1051="            const sDist = s2 - s1;" line1052="            const sStep = Math.idiv(sDist, steps);" line1053="            const s1_100 = s1 * 100;" line1054="" line1055="            //lum" line1056="            const l1 = luminance;" line1057="            const l2 = luminance;" line1058="            const lDist = l2 - l1;" line1059="            const lStep = Math.idiv(lDist, steps);" line1060="            const l1_100 = l1 * 100" line1061="" line1062="            //interpolate" line1063="            if (steps === 1) {" line1064="                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))" line1065="            } else {" line1066="                this.setPixelColor(0, hsl(startHue, saturation, luminance));" line1067="                for (let t = 1; t &lt; steps - 1; t++) {" line1068="                    const u = Math.idiv((h1_100 + t * hStep), 100) + 360;" line1069="                    const v = Math.idiv((s1_100 + t * sStep), 100);" line1070="                    const w = Math.idiv((l1_100 + t * lStep), 100);" line1071="                    this.setPixelColor(t, hsl(u, v, w));" line1072="                }" line1073="                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));" line1074="            }" line1075="            this.show();" line1076="        }" line1077="" line1078="" line1079="        /**" line1080="         * Set LED to a given color (range 0-255 for r, g, b)." line1081="         * You need to call ``show`` to make the changes visible." line1082="         * @param pixeloffset position of the NeoPixel in the strip,eg: 1" line1083="         * @param rgb RGB color of the LED" line1084="         */" line1085="        //% blockId=&quot;neopixel_set_pixel_color&quot; block=&quot;%strip|设置 像素 颜色 在 %pixeloffset|到 %rgb=neopixel_colors&quot;" line1086="        //% strip.defl=strip" line1087="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1088="        //% color=#2699BF blockGap=10" line1089="        setPixelColor(pixeloffset: number, rgb: number): void {" line1090="            this.setPixelRGB(pixeloffset &gt;&gt; 0, rgb &gt;&gt; 0);" line1091="        }" line1092="" line1093="        /**" line1094="         * Send all the changes to the strip." line1095="         */" line1096="        //% blockId=&quot;neopixel_show&quot; block=&quot;%strip|显示&quot;" line1097="        //% strip.defl=strip" line1098="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1099="        //% color=#2699BF blockGap=10" line1100="        show() {" line1101="            // only supported in beta" line1102="            // ws2812b.setBufferMode(this.pin, this._mode);" line1103="            ws2812b.sendBuffer(this.buf, this.pin);" line1104="        }" line1105="" line1106="        /**" line1107="         * Turn off all LEDs." line1108="         * You need to call ``show`` to make the changes visible." line1109="         */" line1110="        //% blockId=&quot;neopixel_clear&quot; block=&quot;%strip|清除&quot;" line1111="        //% strip.defl=strip" line1112="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1113="        //% color=#2699BF blockGap=10" line1114="        clear(): void {" line1115="            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1116="            this.buf.fill(0, this.start * stride, this._length * stride);" line1117="        }" line1118="" line1119="        /**" line1120="         * Set the brightness of the strip. This flag only applies to future operation." line1121="         * @param brightness a measure of LED brightness in 0-255. eg: 255" line1122="         */" line1123="        //% blockId=&quot;neopixel_set_brightness&quot; block=&quot;%strip|设置 亮度 %brightness&quot;" line1124="        //% strip.defl=strip" line1125="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1126="        //% color=#2699BF blockGap=10" line1127="        setBrightness(brightness: number): void {" line1128="            this.brightness = brightness &amp; 0xff;" line1129="        }" line1130="" line1131="        /**" line1132="         * Set the pin where the neopixel is connected, defaults to P0." line1133="         */" line1134="        //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1135="        //% color=#2699BF blockGap=10" line1136="        setPin(pin: DigitalPin): void {" line1137="            this.pin = pin;" line1138="            pins.digitalWritePin(this.pin, 0);" line1139="            // don't yield to avoid races on initialization" line1140="        }" line1141="" line1142="" line1143="" line1144="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line1145="            if (this._mode === NeoPixelMode.RGB_RGB) {" line1146="                this.buf[offset + 0] = red;" line1147="                this.buf[offset + 1] = green;" line1148="            } else {" line1149="                this.buf[offset + 0] = green;" line1150="                this.buf[offset + 1] = red;" line1151="            }" line1152="            this.buf[offset + 2] = blue;" line1153="        }" line1154="" line1155="        private setAllRGB(rgb: number) {" line1156="            let red = unpackR(rgb);" line1157="            let green = unpackG(rgb);" line1158="            let blue = unpackB(rgb);" line1159="" line1160="            const br3 = this.brightness;" line1161="            if (br3 &lt; 255) {" line1162="                red = (red * br3) &gt;&gt; 8;" line1163="                green = (green * br3) &gt;&gt; 8;" line1164="                blue = (blue * br3) &gt;&gt; 8;" line1165="            }" line1166="            const end3 = this.start + this._length;" line1167="            const stride6 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1168="            for (let i5 = this.start; i5 &lt; end3; ++i5) {" line1169="                this.setBufferRGB(i5 * stride6, red, green, blue)" line1170="            }" line1171="        }" line1172="        private setAllW(white: number) {" line1173="            if (this._mode !== NeoPixelMode.RGBW)" line1174="                return;" line1175="" line1176="            let br4 = this.brightness;" line1177="            if (br4 &lt; 255) {" line1178="                white = (white * br4) &gt;&gt; 8;" line1179="            }" line1180="            let buf8 = this.buf;" line1181="            let end4 = this.start + this._length;" line1182="            for (let i6 = this.start; i6 &lt; end4; ++i6) {" line1183="                let ledoffset3 = i6 * 4;" line1184="                buf8[ledoffset3 + 3] = white;" line1185="            }" line1186="        }" line1187="        private setPixelRGB(pixeloffset: number, rgb: number): void {" line1188="            if (pixeloffset &lt; 0" line1189="                || pixeloffset &gt;= this._length)" line1190="                return;" line1191="" line1192="            let stride7 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line1193="            pixeloffset = (pixeloffset + this.start) * stride7;" line1194="" line1195="            let red2 = unpackR(rgb);" line1196="            let green2 = unpackG(rgb);" line1197="            let blue2 = unpackB(rgb);" line1198="" line1199="            let br5 = this.brightness;" line1200="            if (br5 &lt; 255) {" line1201="                red2 = (red2 * br5) &gt;&gt; 8;" line1202="                green2 = (green2 * br5) &gt;&gt; 8;" line1203="                blue2 = (blue2 * br5) &gt;&gt; 8;" line1204="            }" line1205="            this.setBufferRGB(pixeloffset, red2, green2, blue2)" line1206="        }" line1207="        private setPixelW(pixeloffset: number, white: number): void {" line1208="            if (this._mode !== NeoPixelMode.RGBW)" line1209="                return;" line1210="" line1211="            if (pixeloffset &lt; 0" line1212="                || pixeloffset &gt;= this._length)" line1213="                return;" line1214="" line1215="            pixeloffset = (pixeloffset + this.start) * 4;" line1216="" line1217="            let br6 = this.brightness;" line1218="            if (br6 &lt; 255) {" line1219="                white = (white * br6) &gt;&gt; 8;" line1220="            }" line1221="            let buf9 = this.buf;" line1222="            buf9[pixeloffset + 3] = white;" line1223="        }" line1224="    }" line1225="" line1226="    /**" line1227="     * Create a new NeoPixel driver for `numleds` LEDs." line1228="     * @param pin the pin where the neopixel is connected." line1229="     * @param numleds number of leds in the strip, eg: 8,30,60,64" line1230="     */" line1231="    //% blockId=&quot;neopixel_create&quot; block=&quot;灯环 在 端口 %pin|用 %numleds| leds&quot;" line1232="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1233="    //% trackArgs=0,2" line1234="    //% blockSetVariable=strip" line1235="    //% color=#2699BF blockGap=10" line1236="    //% weight=51" line1237="    export function create(pin: DigitalPin, numleds: number): Strip {" line1238="        let strip2 = new Strip();" line1239="        let stride8 = NeoPixelMode.RGBW ? 4 : 3;" line1240="        strip2.buf = pins.createBuffer(numleds * stride8);" line1241="        strip2.start = 0;" line1242="        strip2._length = numleds;" line1243="        strip2._mode = NeoPixelMode.RGB;" line1244="        strip2._matrixWidth = 0;" line1245="        strip2.setBrightness(128)" line1246="        strip2.setPin(pin)" line1247="        return strip2;" line1248="    }" line1249="" line1250="    /**" line1251="     * Converts red, green, blue channels into a RGB color" line1252="     * @param red value of the red channel between 0 and 255. eg: 255" line1253="     * @param green value of the green channel between 0 and 255. eg: 255" line1254="     * @param blue value of the blue channel between 0 and 255. eg: 255" line1255="     */" line1256="    //% blockId=&quot;neopixel_rgb&quot; block=&quot;红 %red|绿 %green|蓝 %blue&quot;" line1257="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1258="    //% weight=32" line1259="    //% color=#2699BF blockGap=10" line1260="    export function rgb(red: number, green: number, blue: number): number {" line1261="        return packRGB(red, green, blue);" line1262="    }" line1263="" line1264="    /**" line1265="     * Gets the RGB value of a known color" line1266="    */" line1267="    //% blockId=&quot;neopixel_colors&quot; block=&quot;%color&quot;" line1268="    //% parts=&quot;neopixel&quot; subcategory=执行器 group=&quot;彩灯&quot;" line1269="    //% weight=32" line1270="    //% color=#2699BF blockGap=10" line1271="    export function colors(color: NeoPixelColors): number {" line1272="        return color;" line1273="    }" line1274="" line1275="    function packRGB(a: number, b: number, c: number): number {" line1276="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line1277="    }" line1278="" line1279="    function unpackR(rgb: number): number {" line1280="        let r3 = (rgb &gt;&gt; 16) &amp; 0xFF;" line1281="        return r3;" line1282="    }" line1283="" line1284="    function unpackG(rgb: number): number {" line1285="        let g3 = (rgb &gt;&gt; 8) &amp; 0xFF;" line1286="        return g3;" line1287="    }" line1288="" line1289="    function unpackB(rgb: number): number {" line1290="        let b3 = (rgb) &amp; 0xFF;" line1291="        return b3;" line1292="    }" line1293="" line1294="    export function hsl(h: number, s: number, l: number): number {" line1295="        h = Math.round(h);" line1296="        s = Math.round(s);" line1297="        l = Math.round(l);" line1298="" line1299="        h = h % 360;" line1300="        s = Math.clamp(0, 99, s);" line1301="        l = Math.clamp(0, 99, l);" line1302="        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]" line1303="        let h12 = Math.idiv(h, 60);//[0,6]" line1304="        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]" line1305="        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);" line1306="        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color" line1307="        let r$: number;" line1308="        let g$: number;" line1309="        let b$: number;" line1310="        if (h12 == 0) {" line1311="            r$ = c2; g$ = x; b$ = 0;" line1312="        } else if (h12 == 1) {" line1313="            r$ = x; g$ = c2; b$ = 0;" line1314="        } else if (h12 == 2) {" line1315="            r$ = 0; g$ = c2; b$ = x;" line1316="        } else if (h12 == 3) {" line1317="            r$ = 0; g$ = x; b$ = c2;" line1318="        } else if (h12 == 4) {" line1319="            r$ = x; g$ = 0; b$ = c2;" line1320="        } else if (h12 == 5) {" line1321="            r$ = c2; g$ = 0; b$ = x;" line1322="        }" line1323="        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);" line1324="        let r4 = r$ + m2;" line1325="        let g4 = g$ + m2;" line1326="        let b4 = b$ + m2;" line1327="        return packRGB(r4, g4, b4);" line1328="    }" line1329="" line1330="    export enum HueInterpolationDirection {" line1331="        Clockwise," line1332="        CounterClockwise," line1333="        Shortest" line1334="    }" line1335="}" numlines="1336"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>